<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="C:\HaxeToolkit\haxe\std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/EReg.hx">
		<_hx_regexp_new_options set="method" static="1">
			<f a="s:options">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_new_options"</e></m></meta>
		</_hx_regexp_new_options>
		<_hx_regexp_match set="method" static="1">
			<f a="handler:string:pos:len">
				<d/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_match"</e></m></meta>
		</_hx_regexp_match>
		<_hx_regexp_matched set="method" static="1">
			<f a="handle:pos">
				<d/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched"</e></m></meta>
		</_hx_regexp_matched>
		<_hx_regexp_matched_pos set="method" static="1">
			<f a="handle:match">
				<d/>
				<x path="Int"/>
				<a>
					<pos><x path="Int"/></pos>
					<len><x path="Int"/></len>
				</a>
			</f>
			<meta><m n=":native"><e>"_hx_regexp_matched_pos"</e></m></meta>
		</_hx_regexp_matched_pos>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/regexp/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately `3.141592653589793`.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of `-1.0 / 0.0`.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of `1.0 / 0.0`.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		`NaN` stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: `Math.sqrt(-1)`.

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		- If `v` is positive or `0`, the result is unchanged. Otherwise the result is `-v`.
		- If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		- If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		- If `a` or `b` are `NaN`, the result is `NaN`.
		- If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		`exp(1.0)` is approximately `2.718281828459`.

		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		- If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		- If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result is `NaN`.
		- If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		- If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to `0.0`,
		and less than `1.0`.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is `Math.NaN`.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, `null`, `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":include"><e>"hxMath.h"</e></m></meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/Std.hx">
		<is public="1" get="inline" set="null" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.is is deprecated. Use Std.isOfType instead."</e></m>
				<m n=":keep"/>
			</meta>
			<haxe_doc>DEPRECATED. Use `Std.isOfType(v, t)` instead.

		Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<isOfType public="1" set="method" line="29" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<downcast public="1" params="T:S" set="method" line="33" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="38" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="42" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="46" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="50" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		`x` may optionally start with a + or - to denote a postive or negative value respectively.

		If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
		digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
		notations are not supported.

		Parsing continues until an invalid character is detected, in which case the result up to
		that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.

		If `x` is `null`, the result is `null`.
		If `x` cannot be parsed as integer or is empty, the result is `null`.

		If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
		digit, the result is unspecified.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="54" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.

		It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
		digits (defines exponent to base 10).</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="58" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/Type.hx">
		<nativeEnumEq set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_enum_eq"</e></m></meta>
		</nativeEnumEq>
		<getEnumValueIndex set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_getEnumValueIndex"</e></m></meta>
		</getEnumValueIndex>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="cpp.ArrayBase" params="" file="C:\HaxeToolkit\haxe\std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="C:\HaxeToolkit\haxe\std/cpp/AutoCast.hx" extern="1"/>
	<abstract path="cpp.Char" params="" file="C:\HaxeToolkit\haxe\std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.ConstCharStar" params="" file="C:\HaxeToolkit\haxe\std/cpp/ConstCharStar.hx">
		<from><icast field="fromString"><c path="String"/></icast></from>
		<this><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></this>
		<to>
			<icast><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
			<icast field="toPointer"><c path="cpp.RawConstPointer"><x path="cpp.Char"/></c></icast>
		</to>
		<impl><class path="cpp._ConstCharStar.ConstCharStar_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/ConstCharStar.hx" private="1" module="cpp.ConstCharStar" extern="1" final="1">
	<_new public="1" get="inline" set="null" line="26" static="1">
		<f a="s">
			<c path="String"/>
			<x path="cpp.ConstCharStar"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<fromString public="1" get="inline" set="null" line="31" static="1">
		<f a="s">
			<c path="String"/>
			<x path="cpp.ConstCharStar"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromString>
	<toString public="1" get="inline" set="null" line="34" static="1">
		<f a="this">
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			<c path="String"/>
		</f>
		<meta>
			<m n=":has_untyped"/>
			<m n=":to"/>
		</meta>
	</toString>
	<toPointer public="1" get="inline" set="null" line="37" static="1">
		<f a="this">
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
		</f>
		<meta><m n=":to"/></meta>
	</toPointer>
</class></impl>
	</abstract>
	<class path="cpp._ConstCharStar.ConstCharStar_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/ConstCharStar.hx" private="1" module="cpp.ConstCharStar" extern="1" final="1">
		<_new public="1" get="inline" set="null" line="26" static="1">
			<f a="s">
				<c path="String"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<fromString public="1" get="inline" set="null" line="31" static="1">
			<f a="s">
				<c path="String"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromString>
		<toString public="1" get="inline" set="null" line="34" static="1">
			<f a="this">
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":to"/>
			</meta>
		</toString>
		<toPointer public="1" get="inline" set="null" line="37" static="1">
			<f a="this">
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":to"/></meta>
		</toPointer>
	</class>
	<class path="cpp.ConstPointer" params="T" file="C:\HaxeToolkit\haxe\std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="C:\HaxeToolkit\haxe\std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="35"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="37"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="39"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="41"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="43"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="C:\HaxeToolkit\haxe\std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
	</class>
	<abstract path="cpp.Float32" params="" file="C:\HaxeToolkit\haxe\std/cpp/Float32.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="cpp.Float32"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.Float64" params="" file="C:\HaxeToolkit\haxe\std/cpp/Float64.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="cpp.Float64"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.Int64" params="" file="C:\HaxeToolkit\haxe\std/cpp/Int64.hx">
		<from>
			<icast><x path="Int"/></icast>
			<icast field="ofInt64"><x path="haxe.Int64"/></icast>
		</from>
		<this><x path="cpp.Int64"/></this>
		<to>
			<icast field="implicitToInt"><x path="Int"/></icast>
			<icast field="toInt64"><x path="haxe.Int64"/></icast>
		</to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
		<impl><class path="cpp._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/Int64.hx" private="1" module="cpp.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<abstract path="cpp.Int8" params="" file="C:\HaxeToolkit\haxe\std/cpp/Int8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Int8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Native" params="" file="C:\HaxeToolkit\haxe\std/cpp/Native.hx" extern="1">
		<nativeMalloc public="1" set="method" static="1">
			<f a="bytes">
				<x path="Int"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
			</f>
			<meta><m n=":native"><e>"malloc"</e></m></meta>
		</nativeMalloc>
		<nativeCalloc public="1" set="method" static="1">
			<f a="bytes">
				<x path="Int"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
			</f>
			<meta><m n=":native"><e>"calloc"</e></m></meta>
		</nativeCalloc>
		<nativeRealloc public="1" set="method" static="1">
			<f a="inPtr:bytes">
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Int"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"realloc"</e></m></meta>
		</nativeRealloc>
		<nativeFree public="1" set="method" static="1">
			<f a="ptr">
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"free"</e></m></meta>
		</nativeFree>
		<nativeMemcpy public="1" set="method" static="1">
			<f a="dest:src:bytes">
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"memcpy"</e></m></meta>
		</nativeMemcpy>
		<sizeof public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="sizeof.T"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":native"><e>"::hx::ClassSizeOf"</e></m>
				<m n=":templatedCall"/>
			</meta>
		</sizeof>
		<star public="1" params="T" set="method" static="1">
			<f a="ptr">
				<t path="cpp.Star"><c path="star.T"/></t>
				<t path="cpp.Reference"><c path="star.T"/></t>
			</f>
			<meta><m n=":native"><e>"::hx::Dereference"</e></m></meta>
		</star>
		<set public="1" params="T" get="inline" set="null" line="46" static="1">
			<f a="ptr:value">
				<t path="cpp.Star"><c path="set.T"/></t>
				<c path="set.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</set>
		<get public="1" params="T" get="inline" set="null" line="51" static="1">
			<f a="ptr">
				<t path="cpp.Star"><c path="get.T"/></t>
				<c path="get.T"/>
			</f>
			<meta><m n=":generic"/></meta>
		</get>
		<memcpy public="1" params="DEST:SRC" get="inline" set="null" line="58" static="1">
			<f a="dest:src:bytes">
				<t path="cpp.Star"><c path="memcpy.DEST"/></t>
				<t path="cpp.Star"><c path="memcpy.SRC"/></t>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</memcpy>
		<malloc public="1" params="T" get="inline" set="null" line="62" static="1">
			<f a="bytes">
				<x path="Int"/>
				<t path="cpp.Star"><c path="malloc.T"/></t>
			</f>
			<meta><m n=":generic"/></meta>
		</malloc>
		<calloc public="1" params="T" get="inline" set="null" line="66" static="1">
			<f a="bytes">
				<x path="Int"/>
				<t path="cpp.Star"><c path="calloc.T"/></t>
			</f>
			<meta><m n=":generic"/></meta>
		</calloc>
		<realloc public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="ioPtr:bytes">
				<t path="cpp.Star"><c path="realloc.T"/></t>
				<x path="Int"/>
				<t path="cpp.Star"><c path="realloc.T"/></t>
			</f>
			<meta><m n=":generic"/></meta>
		</realloc>
		<free public="1" params="T" get="inline" set="null" line="73" static="1">
			<f a="ptr">
				<t path="cpp.Star"><c path="free.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":generic"/></meta>
		</free>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="inVariable">
				<t path="cpp.Reference"><c path="addressOf.T"/></t>
				<t path="cpp.Star"><c path="addressOf.T"/></t>
			</f>
			<meta><m n=":native"><e>"::hx::StarOf"</e></m></meta>
		</addressOf>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"stdlib.h"</e></m>
		</meta>
	</class>
	<class path="cpp.NativeArray" params="" file="C:\HaxeToolkit\haxe\std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" set="method" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_create_array_length"</e></m></meta>
		</create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<removeAt public="1" params="T" set="method" static="1">
			<f a="ioDestArray:inIndex">
				<c path="Array"><c path="removeAt.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</removeAt>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" set="method" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":native"><e>"_hx_array_unsafe_get"</e></m></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":native"><e>"_hx_array_unsafe_set"</e></m>
			</meta>
		</unsafeSet>
		<setSize public="1" params="T" set="method" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_array_set_size_exact"</e></m></meta>
		</setSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeFile" params="" file="C:\HaxeToolkit\haxe\std/cpp/NativeFile.hx" extern="1">
		<file_open public="1" set="method" static="1">
			<f a="fname:r">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_open"</e></m></meta>
		</file_open>
		<file_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_close"</e></m></meta>
		</file_close>
		<file_write public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write"</e></m></meta>
		</file_write>
		<file_write_char public="1" set="method" static="1">
			<f a="handle:c">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write_char"</e></m></meta>
		</file_write_char>
		<file_read public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read"</e></m></meta>
		</file_read>
		<file_read_char public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read_char"</e></m></meta>
		</file_read_char>
		<file_seek public="1" set="method" static="1">
			<f a="handle:pos:kind">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_seek"</e></m></meta>
		</file_seek>
		<file_tell public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_tell"</e></m></meta>
		</file_tell>
		<file_eof public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_eof"</e></m></meta>
		</file_eof>
		<file_flush public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_flush"</e></m></meta>
		</file_flush>
		<file_contents_string public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_string"</e></m></meta>
		</file_contents_string>
		<file_contents_bytes public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_bytes"</e></m></meta>
		</file_contents_bytes>
		<file_stdin public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdin"</e></m></meta>
		</file_stdin>
		<file_stdout public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdout"</e></m></meta>
		</file_stdout>
		<file_stderr public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stderr"</e></m></meta>
		</file_stderr>
		<meta><m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m></meta>
	</class>
	<class path="cpp.NativeString" params="" file="C:\HaxeToolkit\haxe\std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<parseFloat public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_float"</e></m></meta>
		</parseFloat>
		<parseSubstrFloat public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_float"</e></m></meta>
		</parseSubstrFloat>
		<parseInt public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseInt>
		<parseSubstrInt public="1" set="method" static="1">
			<f a="inString:start:length">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_parse_substr_int"</e></m></meta>
		</parseSubstrInt>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.NativeSys" params="" file="C:\HaxeToolkit\haxe\std/cpp/NativeSys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_print"</e></m></meta>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_println"</e></m></meta>
		</println>
		<get_env public="1" set="method" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_get_env"</e></m></meta>
		</get_env>
		<put_env public="1" set="method" static="1">
			<f a="e:v">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_put_env"</e></m></meta>
		</put_env>
		<sys_sleep public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_sleep"</e></m></meta>
		</sys_sleep>
		<set_time_locale public="1" set="method" static="1">
			<f a="l">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_time_locale"</e></m></meta>
		</set_time_locale>
		<get_cwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_get_cwd"</e></m></meta>
		</get_cwd>
		<set_cwd public="1" set="method" static="1">
			<f a="d">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_cwd"</e></m></meta>
		</set_cwd>
		<sys_string public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_string"</e></m></meta>
		</sys_string>
		<sys_is64 public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_is64"</e></m></meta>
		</sys_is64>
		<sys_command public="1" set="method" static="1">
			<f a="cmd">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_command"</e></m></meta>
		</sys_command>
		<sys_exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exit"</e></m></meta>
		</sys_exit>
		<sys_exists public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exists"</e></m></meta>
		</sys_exists>
		<file_delete public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_delete"</e></m></meta>
		</file_delete>
		<sys_rename public="1" set="method" static="1">
			<f a="path:newname">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_rename"</e></m></meta>
		</sys_rename>
		<sys_stat public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_stat"</e></m></meta>
		</sys_stat>
		<sys_file_type public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_file_type"</e></m></meta>
		</sys_file_type>
		<sys_create_dir public="1" set="method" static="1">
			<f a="path:mode">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_create_dir"</e></m></meta>
		</sys_create_dir>
		<sys_remove_dir public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_remove_dir"</e></m></meta>
		</sys_remove_dir>
		<sys_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_time"</e></m></meta>
		</sys_time>
		<sys_cpu_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_cpu_time"</e></m></meta>
		</sys_cpu_time>
		<sys_read_dir public="1" set="method" static="1">
			<f a="p">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_read_dir"</e></m></meta>
		</sys_read_dir>
		<file_full_path public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_full_path"</e></m></meta>
		</file_full_path>
		<sys_exe_path public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_exe_path"</e></m></meta>
		</sys_exe_path>
		<sys_env public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":native"><e>"_hx_std_sys_env"</e></m></meta>
		</sys_env>
		<sys_getch public="1" set="method" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_getch"</e></m></meta>
		</sys_getch>
		<sys_get_pid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_get_pid"</e></m></meta>
		</sys_get_pid>
		<meta><m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m></meta>
	</class>
	<class path="cpp.ObjectType" params="" file="C:\HaxeToolkit\haxe\std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="C:\HaxeToolkit\haxe\std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="73"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="C:\HaxeToolkit\haxe\std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="C:\HaxeToolkit\haxe\std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"::hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="C:\HaxeToolkit\haxe\std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="C:\HaxeToolkit\haxe\std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<class path="cpp.Stdlib" params="" file="C:\HaxeToolkit\haxe\std/cpp/Stdlib.hx" extern="1">
		<nativeMalloc public="1" set="method" static="1">
			<f a="bytes">
				<x path="Int"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"malloc"</e></m></meta>
		</nativeMalloc>
		<nativeCalloc public="1" set="method" static="1">
			<f a="bytes">
				<x path="Int"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"calloc"</e></m></meta>
		</nativeCalloc>
		<nativeRealloc public="1" set="method" static="1">
			<f a="inPtr:bytes">
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
				<x path="Int"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"realloc"</e></m></meta>
		</nativeRealloc>
		<nativeFree public="1" set="method" static="1">
			<f a="ptr">
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"free"</e></m></meta>
		</nativeFree>
		<nativeMemcpy public="1" set="method" static="1">
			<f a="dest:src:bytes">
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
				<c path="cpp.RawConstPointer"><c path="cpp.Void"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"memcpy"</e></m></meta>
		</nativeMemcpy>
		<sizeof public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="sizeof.T"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":native"><e>"::hx::ClassSizeOf"</e></m>
				<m n=":templatedCall"/>
			</meta>
		</sizeof>
		<memcpy public="1" params="DEST:SRC" get="inline" set="null" line="42" static="1"><f a="dest:src:bytes">
	<c path="cpp.Pointer"><c path="memcpy.DEST"/></c>
	<c path="cpp.ConstPointer"><c path="memcpy.SRC"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></memcpy>
		<malloc public="1" params="T" get="inline" set="null" line="45" static="1"><f a="bytes">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="malloc.T"/></c>
</f></malloc>
		<calloc public="1" params="T" get="inline" set="null" line="48" static="1"><f a="bytes">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="calloc.T"/></c>
</f></calloc>
		<realloc public="1" params="T" get="inline" set="null" line="51" static="1"><f a="ioPtr:bytes">
	<c path="cpp.Pointer"><c path="realloc.T"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></realloc>
		<free public="1" params="T" get="inline" set="null" line="53" static="1"><f a="ptr">
	<c path="cpp.Pointer"><c path="free.T"/></c>
	<x path="Void"/>
</f></free>
		<meta><m n=":include"><e>"stdlib.h"</e></m></meta>
	</class>
	<abstract path="cpp.UInt32" params="" file="C:\HaxeToolkit\haxe\std/cpp/UInt32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt32"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.UInt8" params="" file="C:\HaxeToolkit\haxe\std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="C:\HaxeToolkit\haxe\std/cpp/Void.hx" extern="1"><meta>
	<m n=":directlyUsed"/>
	<m n=":native"><e>"void"</e></m>
</meta></class>
	<abstract path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe._Int64.NativeInt64Helper" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<isInt64 public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</isInt64>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<meta><m n=":include"><e>"cpp/Int64.h"</e></m></meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><x path="cpp.Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
			<m n=":notNull"/>
		</meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/Log.hx">
		<nativeTrace set="method" static="1">
			<f a="message:posInfo">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__trace"</e></m></meta>
		</nativeTrace>
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<meta>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>list of metas to include in responses</haxe_doc>
			</meta>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>Completion</haxe_doc>
	</typedef>
	<typedef path="haxe.display.FieldResolution" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<qualifier>
		<c path="String"/>
		<haxe_doc>The qualifier that has to be inserted to use the field if `!isQualified`.
		Can either be `this` or `super` for instance fields for the type name for `static` fields.</haxe_doc>
	</qualifier>
	<isQualified>
		<x path="Bool"/>
		<haxe_doc>Whether it's valid to use the unqualified name of the field or not.
		This is `false` if the identifier is shadowed.</haxe_doc>
	</isQualified>
</a></typedef>
	<typedef path="haxe.display.DisplayLocal" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type><t path="haxe.display.JsonType"><c path="haxe.display.DisplayLocal.T"/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<origin><x path="haxe.display.LocalOrigin"/></origin>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<isInline><x path="Bool"/></isInline>
	<isFinal><x path="Bool"/></isFinal>
	<id><x path="Int"/></id>
	<extra>
		<x path="Null"><a>
	<params><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></params>
	<expr><t path="haxe.display.JsonExpr"/></expr>
</a></x>
		<meta><m n=":optional"/></meta>
	</extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<abstract path="haxe.display.LocalOrigin" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.LocalOrigin_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.ClassFieldOriginKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.ClassFieldOriginKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.ClassFieldOrigin" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.ClassFieldOriginKind"><c path="haxe.display.ClassFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.ClassFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.ClassFieldOccurrence" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.ClassFieldOrigin"><c path="haxe.display.ClassFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonClassField"/></field>
</a></typedef>
	<abstract path="haxe.display.EnumFieldOriginKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.EnumFieldOriginKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.EnumFieldOrigin" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.EnumFieldOriginKind"><c path="haxe.display.EnumFieldOrigin.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.EnumFieldOrigin.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.EnumFieldOccurrence" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<resolution><t path="haxe.display.FieldResolution"/></resolution>
	<origin>
		<x path="Null"><t path="haxe.display.EnumFieldOrigin"><c path="haxe.display.EnumFieldOccurrence.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<field><t path="haxe.display.JsonEnumField"/></field>
</a></typedef>
	<abstract path="haxe.display.Literal" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Literal_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.DisplayModuleTypeKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayModuleTypeKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DisplayModuleType" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><c path="Array"><t path="haxe.display.DisplayModuleTypeParameter"/></c></params>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.DisplayModuleTypeKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.DisplayModuleTypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<constraints><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></constraints>
</a></typedef>
	<typedef path="haxe.display.DisplayLiteral" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><c path="String"/></name></a></typedef>
	<abstract path="haxe.display.MetadataTarget" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.MetadataTarget_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.Platform" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.Platform_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<targets><c path="Array"><x path="haxe.display.MetadataTarget"/></c></targets>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<origin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</origin>
	<name><c path="String"/></name>
	<links>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</links>
	<internal><x path="Bool"/></internal>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Define" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<value><x path="Null"><c path="String"/></x></value>
	<platforms><c path="Array"><x path="haxe.display.Platform"/></c></platforms>
	<parameters><c path="Array"><c path="String"/></c></parameters>
	<name><c path="String"/></name>
	<links><c path="Array"><c path="String"/></c></links>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.Keyword" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a><name><x path="haxe.display.KeywordKind"/></name></a></typedef>
	<abstract path="haxe.display.KeywordKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.KeywordKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.Package" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonPackagePath"/></path></a></typedef>
	<typedef path="haxe.display.Module" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a><path><t path="haxe.display.JsonModulePath"/></path></a></typedef>
	<abstract path="haxe.display.DisplayItemKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.DisplayItemKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DisplayItem" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<kind><x path="haxe.display.DisplayItemKind"><c path="haxe.display.DisplayItem.T"/></x></kind>
	<index>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</index>
	<args><c path="haxe.display.DisplayItem.T"/></args>
</a></typedef>
	<typedef path="haxe.display.DisplayItemOccurrence" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.DisplayItemOccurrence.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.FieldCompletionSubject" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<keyValueIterator>
		<x path="Null"><a>
	<value><t path="haxe.display.JsonType"><d/></t></value>
	<key><t path="haxe.display.JsonType"><d/></t></key>
</a></x>
		<meta><m n=":optional"/></meta>
	</keyValueIterator>
	<iterator>
		<x path="Null"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></x>
		<meta><m n=":optional"/></meta>
	</iterator>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.FieldCompletionSubject.T"/></t></item>
</a></typedef>
	<typedef path="haxe.display.ToplevelCompletion" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.ToplevelCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<typedef path="haxe.display.StructExtensionCompletion" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a><isIntersectionType><x path="Bool"/></isIntersectionType></a></typedef>
	<typedef path="haxe.display.PatternCompletion" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<isOutermostPattern><x path="Bool"/></isOutermostPattern>
	<expectedTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedTypeFollowed>
	<expectedType>
		<x path="Null"><t path="haxe.display.JsonType"><c path="haxe.display.PatternCompletion.T"/></t></x>
		<meta><m n=":optional"/></meta>
	</expectedType>
	<compatibleTypes>
		<x path="Null"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></x>
		<meta><m n=":optional"/></meta>
	</compatibleTypes>
</a></typedef>
	<abstract path="haxe.display.CompletionModeKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.CompletionModeKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.CompletionMode" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<kind><x path="haxe.display.CompletionModeKind"><c path="haxe.display.CompletionMode.T"/></x></kind>
	<args>
		<x path="Null"><c path="haxe.display.CompletionMode.T"/></x>
		<meta><m n=":optional"/></meta>
	</args>
</a></typedef>
	<typedef path="haxe.display.CompletionResponse" params="T1:T2" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<replaceRange>
		<x path="Null"><t path="haxe.display.Range"/></x>
		<meta><m n=":optional"/></meta>
	</replaceRange>
	<mode><t path="haxe.display.CompletionMode"><c path="haxe.display.CompletionResponse.T2"/></t></mode>
	<items><c path="Array"><t path="haxe.display.DisplayItem"><c path="haxe.display.CompletionResponse.T1"/></t></c></items>
	<isIncomplete>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</isIncomplete>
	<filterString>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</filterString>
</a></typedef>
	<typedef path="haxe.display.CompletionResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.CompletionResponse">
	<d/>
	<d/>
</t></x></t></typedef>
	<typedef path="haxe.display.CompletionItemResolveParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<a><index><x path="Int"/></index></a>
		<haxe_doc>CompletionItem Resolve</haxe_doc>
	</typedef>
	<typedef path="haxe.display.CompletionItemResolveResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><a><item><t path="haxe.display.DisplayItem"><d/></t></item></a></t></typedef>
	<typedef path="haxe.display.FindReferencesParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<kind>
				<x path="Null"><x path="haxe.display.FindReferencesKind"/></x>
				<meta><m n=":optional"/></meta>
			</kind>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>FindReferences</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FindReferencesKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.FindReferencesKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.GotoDefinitionResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.GotoTypeDefinitionResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><t path="haxe.display.Location"/></c></t>
		<haxe_doc>GotoTypeDefinition</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><x path="Null"><t path="haxe.display.HoverDisplayItemOccurence"><d/></t></x></t>
		<haxe_doc>Hover</haxe_doc>
	</typedef>
	<typedef path="haxe.display.HoverDisplayItemOccurence" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<range><t path="haxe.display.Range"/></range>
	<moduleTypeFollowed>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleTypeFollowed>
	<moduleType>
		<x path="Null"><t path="haxe.display.JsonModuleType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</moduleType>
	<item><t path="haxe.display.DisplayItem"><c path="haxe.display.HoverDisplayItemOccurence.T"/></t></item>
	<expected>
		<x path="Null"><a>
	<type>
		<x path="Null"><t path="haxe.display.JsonType"><d/></t></x>
		<meta><m n=":optional"/></meta>
	</type>
	<name>
		<x path="Null"><a>
	<name><c path="String"/></name>
	<kind><x path="haxe.display.HoverExpectedNameKind"/></kind>
	<doc>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</doc>
</a></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
		<meta><m n=":optional"/></meta>
	</expected>
</a></typedef>
	<abstract path="haxe.display.HoverExpectedNameKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.HoverExpectedNameKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.DeterminePackageResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<t path="haxe.display.Response"><c path="Array"><c path="String"/></c></t>
		<haxe_doc>DeterminePackage</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureHelpParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<wasAutoTriggered><x path="Bool"/></wasAutoTriggered>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>SignatureHelp</haxe_doc>
	</typedef>
	<typedef path="haxe.display.SignatureInformation" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<documentation>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</documentation>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.SignatureItemKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Display.SignatureItemKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" private="1" module="haxe.display.Display" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.SignatureItem" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><a>
	<signatures><c path="Array"><t path="haxe.display.SignatureInformation"/></c></signatures>
	<kind><x path="haxe.display.SignatureItemKind"/></kind>
	<activeSignature><x path="Int"/></activeSignature>
	<activeParameter><x path="Int"/></activeParameter>
</a></typedef>
	<typedef path="haxe.display.SignatureHelpResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display"><t path="haxe.display.Response"><x path="Null"><t path="haxe.display.SignatureItem"/></x></t></typedef>
	<typedef path="haxe.display.PositionParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Display.hx" module="haxe.display.Display">
		<a>
			<offset>
				<x path="Int"/>
				<haxe_doc>Unicode character offset in the file.</haxe_doc>
			</offset>
			<file><x path="haxe.display.FsPath"/></file>
			<contents>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</contents>
		</a>
		<haxe_doc>General types</haxe_doc>
	</typedef>
	<abstract path="haxe.display.FsPath" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/FsPath.hx">
		<this><c path="String"/></this>
		<impl><class path="haxe.display._FsPath.FsPath_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/FsPath.hx" private="1" module="haxe.display.FsPath" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonTodo" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><d/></typedef>
	<typedef path="haxe.display.JsonPos" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.display.JsonDoc" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><x path="Null"><c path="String"/></x></typedef>
	<abstract path="haxe.display.ImportStatus" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.ImportStatus_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonPackagePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><pack><c path="Array"><c path="String"/></c></pack></a></typedef>
	<typedef path="haxe.display.JsonModulePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonTypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
</a></typedef>
	<typedef path="haxe.display.JsonStaticFieldPath" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<typeName><c path="String"/></typeName>
	<pack><c path="Array"><c path="String"/></c></pack>
	<moduleName><c path="String"/></moduleName>
	<importStatus>
		<x path="Null"><x path="haxe.display.ImportStatus"/></x>
		<meta><m n=":optional"/></meta>
	</importStatus>
	<fieldName><c path="String"/></fieldName>
</a></typedef>
	<typedef path="haxe.display.JsonTypePathWithParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<path><t path="haxe.display.JsonTypePath"/></path>
	<params><t path="haxe.display.JsonTypes"/></params>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionArgument" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<value>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</value>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.display.JsonFunctionSignature" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<ret><t path="haxe.display.JsonType"><d/></t></ret>
	<args><c path="Array"><t path="haxe.display.JsonFunctionArgument"/></c></args>
</a></typedef>
	<abstract path="haxe.display.JsonAnonStatusKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonAnonStatusKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonAnonStatus" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonAnonStatusKind"><c path="haxe.display.JsonAnonStatus.T"/></x></kind>
	<args><c path="haxe.display.JsonAnonStatus.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonAnon" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<status><t path="haxe.display.JsonAnonStatus"><d/></t></status>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
</a></typedef>
	<abstract path="haxe.display.JsonTypeKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTypeKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonType" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTypeKind"><c path="haxe.display.JsonType.T"/></x></kind>
	<args><c path="haxe.display.JsonType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTypes" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonType"><d/></t></c></typedef>
	<typedef path="haxe.display.JsonTypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<name><c path="String"/></name>
	<constraints><t path="haxe.display.JsonTypes"/></constraints>
</a></typedef>
	<typedef path="haxe.display.JsonTypeParameters" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonTypeParameter"/></c></typedef>
	<abstract path="haxe.display.JsonBinopKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonBinopKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonBinop" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonBinopKind"><c path="haxe.display.JsonBinop.T"/></x></kind>
	<args><c path="haxe.display.JsonBinop.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonUnop" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonUnop_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<typedef path="haxe.display.JsonMetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<name><c path="String"/></name>
	<args><c path="Array"><t path="haxe.display.JsonExpr"/></c></args>
</a></typedef>
	<typedef path="haxe.display.JsonMetadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonMetadataEntry"/></c></typedef>
	<abstract path="haxe.display.JsonTConstantKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonTConstantKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonTConstant" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonTConstantKind"><c path="haxe.display.JsonTConstant.T"/></x></kind>
	<args><c path="haxe.display.JsonTConstant.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonTExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><t path="haxe.display.JsonTodo"/></typedef>
	<abstract path="haxe.display.JsonVarAccessKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonVarAccessKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonVarAccess" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonVarAccessKind"><c path="haxe.display.JsonVarAccess.T"/></x></kind>
	<args><c path="haxe.display.JsonVarAccess.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonMethodKind" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonMethodKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.display.JsonFieldKindKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonFieldKindKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonFieldKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonFieldKindKind"><c path="haxe.display.JsonFieldKind.T"/></x></kind>
	<args><c path="haxe.display.JsonFieldKind.T"/></args>
</a></typedef>
	<abstract path="haxe.display.JsonClassFieldScope" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassFieldScope_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<scope><x path="haxe.display.JsonClassFieldScope"/></scope>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<overloads><t path="haxe.display.JsonClassFields"/></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><t path="haxe.display.JsonFieldKind"><d/></t></kind>
	<isPublic><x path="Bool"/></isPublic>
	<isFinal><x path="Bool"/></isFinal>
	<isAbstract><x path="Bool"/></isAbstract>
	<expr>
		<x path="Null"><a><string><c path="String"/></string></a></x>
		<meta><m n=":optional"/></meta>
	</expr>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonClassFields" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonClassField"/></c></typedef>
	<typedef path="haxe.display.JsonClassFieldReference" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="String"/></typedef>
	<typedef path="haxe.display.JsonEnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="haxe.display.JsonDoc"/></doc>
</a></typedef>
	<typedef path="haxe.display.JsonEnumFields" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><c path="Array"><t path="haxe.display.JsonEnumField"/></c></typedef>
	<abstract path="haxe.display.JsonClassKindKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonClassKindKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonClassKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<kind><x path="haxe.display.JsonClassKindKind"><c path="haxe.display.JsonClassKind.T"/></x></kind>
	<args><c path="haxe.display.JsonClassKind.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonClass" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<superClass><x path="Null"><t path="haxe.display.JsonTypePathWithParams"/></x></superClass>
	<statics><t path="haxe.display.JsonClassFields"/></statics>
	<overrides><c path="Array"><t path="haxe.display.JsonClassFieldReference"/></c></overrides>
	<kind><t path="haxe.display.JsonClassKind"><d/></t></kind>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<isExtern><x path="Bool"/></isExtern>
	<isAbstract><x path="Bool"/></isAbstract>
	<interfaces><c path="Array"><t path="haxe.display.JsonTypePathWithParams"/></c></interfaces>
	<init><x path="Null"><t path="haxe.display.JsonTExpr"/></x></init>
	<fields><t path="haxe.display.JsonClassFields"/></fields>
	<constructor><x path="Null"><t path="haxe.display.JsonClassField"/></x></constructor>
</a></typedef>
	<typedef path="haxe.display.JsonEnum" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<isExtern><x path="Bool"/></isExtern>
	<constructors><t path="haxe.display.JsonEnumFields"/></constructors>
</a></typedef>
	<typedef path="haxe.display.JsonTypedef" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a><type><t path="haxe.display.JsonType"><d/></t></type></a></typedef>
	<typedef path="haxe.display.JsonAbstractBinop" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<op><t path="haxe.display.JsonBinop"><d/></t></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractUnop" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<postFix><x path="Bool"/></postFix>
	<op><x path="haxe.display.JsonUnop"/></op>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstractCast" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<t><t path="haxe.display.JsonType"><d/></t></t>
	<field><t path="haxe.display.JsonClassFieldReference"/></field>
</a></typedef>
	<typedef path="haxe.display.JsonAbstract" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<unops><c path="Array"><t path="haxe.display.JsonAbstractUnop"/></c></unops>
	<type><t path="haxe.display.JsonType"><d/></t></type>
	<to><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></to>
	<resolve><x path="Null"><t path="haxe.display.JsonClassFieldReference"/></x></resolve>
	<impl><x path="Null"><t path="haxe.display.JsonClass"/></x></impl>
	<from><c path="Array"><t path="haxe.display.JsonAbstractCast"/></c></from>
	<binops><c path="Array"><t path="haxe.display.JsonAbstractBinop"/></c></binops>
	<array><t path="haxe.display.JsonClassFields"/></array>
</a></typedef>
	<abstract path="haxe.display.JsonModuleTypeKind" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._JsonModuleTypes.JsonModuleTypeKind_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" private="1" module="haxe.display.JsonModuleTypes" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.display.JsonModuleType" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx" module="haxe.display.JsonModuleTypes"><a>
	<pos><t path="haxe.display.JsonPos"/></pos>
	<params><t path="haxe.display.JsonTypeParameters"/></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<moduleName><c path="String"/></moduleName>
	<meta><t path="haxe.display.JsonMetadata"/></meta>
	<kind><x path="haxe.display.JsonModuleTypeKind"><c path="haxe.display.JsonModuleType.T"/></x></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<doc><t path="haxe.display.JsonDoc"/></doc>
	<args><c path="haxe.display.JsonModuleType.T"/></args>
</a></typedef>
	<typedef path="haxe.display.JsonModuleTypes" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/JsonModuleTypes.hx"><c path="Array"><t path="haxe.display.JsonModuleType"><d/></t></c></typedef>
	<typedef path="haxe.display.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Position.hx">
		<a>
			<line>
				<x path="Int"/>
				<haxe_doc>Line position in a document (1-based).</haxe_doc>
			</line>
			<character>
				<x path="Int"/>
				<haxe_doc>Character offset on a line in a document (1-based).</haxe_doc>
			</character>
		</a>
		<haxe_doc>Position in a text document expressed as 1-based line and character offset.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Range" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<start>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's start position</haxe_doc>
			</start>
			<end>
				<t path="haxe.display.Position"/>
				<haxe_doc>The range's end position</haxe_doc>
			</end>
		</a>
		<haxe_doc>A range in a text document expressed as (1-based) start and end positions.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.Location" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Position.hx" module="haxe.display.Position">
		<a>
			<range><t path="haxe.display.Range"/></range>
			<file><x path="haxe.display.FsPath"/></file>
		</a>
		<haxe_doc>Represents a location inside a resource, such as a line inside a text file.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<supportsResolve final="1" set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</supportsResolve>
	<maxCompletionItems final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of completion items to return</haxe_doc>
	</maxCompletionItems>
	<exclude final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>dot paths to exclude from readClassPaths / toplevel completion</haxe_doc>
	</exclude>
</a></typedef>
	<typedef path="haxe.display.Version" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<a>
			<pre final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</pre>
			<patch final="1" set="null"><x path="Int"/></patch>
			<minor final="1" set="null"><x path="Int"/></minor>
			<major final="1" set="null"><x path="Int"/></major>
			<build final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
			</build>
		</a>
		<haxe_doc>Represents a semantic version, see https://semver.org/.</haxe_doc>
	</typedef>
	<typedef path="haxe.display.InitializeResult" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><t path="haxe.display.Response"><a>
	<protocolVersion final="1" set="null"><t path="haxe.display.Version"/></protocolVersion>
	<methods final="1" set="null"><c path="Array"><c path="String"/></c></methods>
	<haxeVersion final="1" set="null"><t path="haxe.display.Version"/></haxeVersion>
</a></t></typedef>
	<typedef path="haxe.display.Timer" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<time final="1" set="null"><x path="Float"/></time>
	<percentTotal final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentTotal>
	<percentParent final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</percentParent>
	<path final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</path>
	<name final="1" set="null"><c path="String"/></name>
	<info final="1" set="null">
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</info>
	<children final="1" set="null">
		<x path="Null"><c path="Array"><t path="haxe.display.Timer"/></c></x>
		<meta><m n=":optional"/></meta>
	</children>
	<calls final="1" set="null">
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</calls>
</a></typedef>
	<typedef path="haxe.display.Response" params="T" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a>
	<timestamp final="1" set="null">
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>UNIX timestamp at the moment the data was sent.</haxe_doc>
	</timestamp>
	<timers final="1" set="null">
		<x path="Null"><t path="haxe.display.Timer"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Only sent if `--times` is enabled.</haxe_doc>
	</timers>
	<result final="1" set="null">
		<x path="Null"><c path="haxe.display.Response.T"/></x>
		<meta><m n=":optional"/></meta>
	</result>
</a></typedef>
	<typedef path="haxe.display.FileParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><a><file><x path="haxe.display.FsPath"/></file></a></typedef>
	<abstract path="haxe.display.HaxeRequestMethod" params="TParams:TResponse" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeRequestMethod_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.display.HaxeNotificationMethod" params="TParams" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<impl><class path="haxe.display._Protocol.HaxeNotificationMethod_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.display.HaxeResponseErrorData" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol"><c path="Array"><a>
	<severity><x path="haxe.display.HaxeResponseErrorSeverity"/></severity>
	<message><c path="String"/></message>
	<location>
		<x path="Null"><t path="haxe.display.Location"/></x>
		<meta><m n=":optional"/></meta>
	</location>
</a></c></typedef>
	<abstract path="haxe.display.HaxeResponseErrorSeverity" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" module="haxe.display.Protocol">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.display._Protocol.HaxeResponseErrorSeverity_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/display/Protocol.hx" private="1" module="haxe.display.Protocol" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ds.TreeNode" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.IntMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="62">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="66">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<new public="1" set="method" line="60">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\r\n  inline void set(int key, ::null value) { __int_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, bool value) { __int_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, signed char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, float value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, double value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, ::String value) { __int_hash_set_string(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, cpp::Int64 value) { __int_hash_set_int64(HX_MAP_THIS,key,value); }\r\n\r\n  template<typename V, typename H>\r\n  inline void set(int key, const ::cpp::Struct<V,H> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename F>\r\n  inline void set(int key, const ::cpp::Function<F> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename V>\r\n  inline void set(int key, const ::cpp::Pointer<V> &value) {__int_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n\r\n  template<typename VALUE>\r\n  inline void set(Dynamic &key, const VALUE &value) { set( (int)key, value ); }\r\n\r\n  inline bool get_bool(int key) { return __int_hash_get_bool(h,key); }\r\n  inline int get_int(int key) { return __int_hash_get_int(h,key); }\r\n  inline Float get_float(int key) { return __int_hash_get_float(h,key); }\r\n  inline String get_string(int key) { return __int_hash_get_string(h,key); }\r\n  inline cpp::Int64 get_int64(int key) { return __int_hash_get_int64(h,key); }\r\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<create public="1" params="T" get="inline" set="null" line="271" static="1"><f a="item:next">
	<c path="create.T"/>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
	<c path="haxe.ds._List.ListNode"><c path="create.T"/></c>
</f></create>
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="62">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<new public="1" set="method" line="60">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\r\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, cpp::Int64 value) { __string_hash_set_int64(HX_MAP_THIS,key,value); }\r\n\r\n  template<typename V, typename H>\r\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename V>\r\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n  template<typename V>\r\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n\r\n  template<typename VALUE>\r\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\r\n\r\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\r\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\r\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\r\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\r\n  inline cpp::Int64 get_int64(String key) { return __string_hash_get_int64(h,key); }\r\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a="length">
			<x path="Int"/>
			<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
		<overloads><_new public="1" get="inline" set="null" line="96">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1">
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a="length">
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Vector of length `length`.

		Initially `this` Vector contains `length` neutral elements:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
			<overloads><_new public="1" get="inline" set="null" line="96">
	<f a="length:defaultValue">
		<x path="Int"/>
		<c path="haxe.ds.Vector.T"/>
		<x path="haxe.ds.Vector"><c path="haxe.ds.Vector.T"/></x>
	</f>
	<meta><m n=":noCompletion"/></meta>
	<haxe_doc>Creates a new Vector of length `length` filled with `defaultValue` elements.

		Can be faster than `new Vector(length)` for iteration on some targets for non-nullable elements.

		If `length` is less than or equal to 0, the result is unspecified.</haxe_doc>
</_new></overloads>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.extern.AsVar" params="T" file="C:\HaxeToolkit\haxe\std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="C:\HaxeToolkit\haxe\std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.macro.IncludePosition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.IncludePosition_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.macro.NullSafetyMode" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.macro._Compiler.NullSafetyMode_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" private="1" module="haxe.macro.Compiler" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="haxe.macro.MetadataDescription" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<targets final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.MetadataTarget"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Places where this metadata can be applied.</haxe_doc>
	</targets>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this metadata is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this metadata accepts.</haxe_doc>
	</params>
	<metadata final="1" set="null"><c path="String"/></metadata>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this metadata.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.macro.DefineDescription" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<platforms final="1" set="null">
		<x path="Null"><c path="Array"><x path="haxe.display.Platform"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Haxe target(s) for which this define is used.</haxe_doc>
	</platforms>
	<params final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>List (small description) of parameters that this define accepts.</haxe_doc>
	</params>
	<links final="1" set="null">
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>External resources for more information about this define.</haxe_doc>
	</links>
	<doc final="1" set="null"><c path="String"/></doc>
	<define final="1" set="null"><c path="String"/></define>
</a></typedef>
	<typedef path="haxe.macro.CompilerConfiguration" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Compiler.hx" module="haxe.macro.Compiler"><a>
	<version final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The version integer of the current Haxe compiler build.</haxe_doc>
	</version>
	<verbose final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--verbose` mode is enabled, this is `true`.</haxe_doc>
	</verbose>
	<stdPath final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>A list of paths being used for the standard library.</haxe_doc>
	</stdPath>
	<platformConfig final="1" set="null">
		<t path="haxe.macro.PlatformConfig"/>
		<haxe_doc>The compilation configuration for the target platform.</haxe_doc>
	</platformConfig>
	<platform final="1" set="null">
		<x path="haxe.display.Platform"/>
		<haxe_doc>The target platform.</haxe_doc>
	</platform>
	<packageRules final="1" set="null">
		<t path="Map">
			<c path="String"/>
			<e path="haxe.macro.PackageRule"/>
		</t>
		<haxe_doc>Special access rules for packages depending on the compiler configuration.

		For example, the "java" package is "Forbidden" when the target platform is Python.</haxe_doc>
	</packageRules>
	<mainClass final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>The path of the class passed using the `-main` argument.</haxe_doc>
	</mainClass>
	<foptimize final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--no-opt` is enabled, this is `false`.</haxe_doc>
	</foptimize>
	<debug final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>If `--debug` mode is enabled, this is `true`.</haxe_doc>
	</debug>
	<args final="1" set="null">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>Returns an array of the arguments passed to the compiler from either the `.hxml` file or the command line.</haxe_doc>
	</args>
</a></typedef>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isStatic>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable is static.</haxe_doc>
			</isStatic>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<defaultType>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional default type of the type parameter.</haxe_doc>
			</defaultType>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.PlatformConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/PlatformConfig.hx">
		<a>
			<usesUtf16 final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Uses utf16 encoding with ucs2 api</haxe_doc>
			</usesUtf16>
			<thisBeforeSuper final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports accessing `this` before calling `super(...)`</haxe_doc>
			</thisBeforeSuper>
			<sys final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has access to the "sys" package</haxe_doc>
			</sys>
			<supportsUnicode final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports Unicode</haxe_doc>
			</supportsUnicode>
			<supportsThreads final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports threads</haxe_doc>
			</supportsThreads>
			<supportsRestArgs final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports rest arguments</haxe_doc>
			</supportsRestArgs>
			<supportsFunctionEquality final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Supports function == function</haxe_doc>
			</supportsFunctionEquality>
			<supportsAtomics final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Target supports atomic operations via haxe.Atomic</haxe_doc>
			</supportsAtomics>
			<staticTypeSystem final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Has a static type system, with not-nullable basic types (Int/Float/Bool)</haxe_doc>
			</staticTypeSystem>
			<scoping final="1" set="null">
				<t path="haxe.macro.VarScopingConfig"/>
				<haxe_doc>The scoping of local variables</haxe_doc>
			</scoping>
			<reservedTypePaths final="1" set="null">
				<c path="Array"><t path="haxe.macro.TypePath"/></c>
				<haxe_doc>Type paths that are reserved on the platform</haxe_doc>
			</reservedTypePaths>
			<padNulls final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>When calling a method with optional args, do we replace the missing args with "null" constants</haxe_doc>
			</padNulls>
			<overloadFunctions final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Does the platform natively support overloaded functions</haxe_doc>
			</overloadFunctions>
			<exceptions final="1" set="null">
				<t path="haxe.macro.ExceptionsConfig"/>
				<haxe_doc>Exceptions handling config</haxe_doc>
			</exceptions>
			<capturePolicy final="1" set="null">
				<e path="haxe.macro.CapturePolicy"/>
				<haxe_doc>Captured variables handling (see before)</haxe_doc>
			</capturePolicy>
			<canSkipNonNullableArgument final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Can the platform use default values for non-nullable arguments</haxe_doc>
			</canSkipNonNullableArgument>
			<addFinalReturn final="1" set="null">
				<x path="Bool"/>
				<haxe_doc>Add a final return to methods not having one already - prevent some compiler warnings</haxe_doc>
			</addFinalReturn>
		</a>
		<haxe_doc>Represents the internal structure generated with options assigned based on
	the target platform.

	Warning: `PlatformConfig` and the typedefs unique to its fields correspond to
	compiler-internal data structures and might change in minor Haxe releases in
	order to adapt to internal changes.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.VarScopingConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<scope final="1" set="null"><e path="haxe.macro.VarScope"/></scope>
	<flags final="1" set="null"><c path="Array"><e path="haxe.macro.VarScopingFlags"/></c></flags>
</a></typedef>
	<typedef path="haxe.macro.ExceptionsConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/PlatformConfig.hx" module="haxe.macro.PlatformConfig"><a>
	<wildcardCatch final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native class or interface, which can be used for wildcard catches.</haxe_doc>
	</wildcardCatch>
	<nativeThrows final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be thrown from Haxe code without wrapping.</haxe_doc>
	</nativeThrows>
	<nativeCatches final="1" set="null">
		<c path="Array"><t path="haxe.macro.TypePath"/></c>
		<haxe_doc>Base types which may be caught from Haxe code without wrapping.</haxe_doc>
	</nativeCatches>
	<baseThrow final="1" set="null">
		<t path="haxe.macro.TypePath"/>
		<haxe_doc>Path of a native base class or interface, which can be thrown.
		This type is used to cast `haxe.Exception.thrown(v)` calls to.
		For example `throw 123` is compiled to `throw (cast Exception.thrown(123):ec_base_throw)`</haxe_doc>
	</baseThrow>
	<avoidWrapping final="1" set="null">
		<x path="Bool"/>
		<haxe_doc>Hint exceptions filter to avoid wrapping for targets, which can throw/catch any type
		Ignored on targets with a specific native base type for exceptions.</haxe_doc>
	</avoidWrapping>
</a></typedef>
	<typedef path="haxe.macro.TExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc><![CDATA[This class can be added via `using haxe.macro.Tools` in order to enable
	`using` functionality on these macro tool classes:

	- `haxe.macro.ExprTools`
	- `haxe.macro.ComplexTypeTools`
	- `haxe.macro.TypeTools`
	- `haxe.macro.MacroStringTools`
	- `haxe.macro.TypedExprTools`
	- `haxe.macro.PositionTools`

	  @see <https://haxe.org/manual/lf-static-extension.html>]]></haxe_doc>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ComplexTypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypeTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TMacroStringTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.MacroStringTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TTypedExprTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.TypedExprTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.TPositionTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.PositionTools"/>
		<meta><m n=":dox"><e>hide</e></m></meta>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<defaultType>
				<x path="Null"><e path="haxe.macro.Type"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default type for this type parameter.</haxe_doc>
			</defaultType>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is abstract.</haxe_doc>
			</isAbstract>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<isAbstract>
				<x path="Bool"/>
				<haxe_doc>If true the class is abstract and cannot be instantiated directly.</haxe_doc>
			</isAbstract>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALErrorDef" params="" file="source/haxeal/ALError.hx" module="haxeal.ALError"><a>
	<name><c path="String"/></name>
	<description><c path="String"/></description>
</a></typedef>
	<class path="haxeal.ALError" params="" file="source/haxeal/ALError.hx">
		<NO_ERROR final="1" public="1" set="null" expr="{ name : &quot;No Error&quot;, description : &quot;There was no error&quot; }" line="8" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "No Error", description : "There was no error" }</e></m></meta>
		</NO_ERROR>
		<INVALID_NAME final="1" public="1" set="null" expr="{ name : &quot;Invalid Name&quot;, description : &quot;Invalid name (ID) passed to an AL call&quot; }" line="9" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "Invalid Name", description : "Invalid name (ID) passed to an AL call" }</e></m></meta>
		</INVALID_NAME>
		<INVALID_ENUM final="1" public="1" set="null" expr="{ name : &quot;Invalid Enum&quot;, description : &quot;Invalid enumeration passed to AL call&quot; }" line="10" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "Invalid Enum", description : "Invalid enumeration passed to AL call" }</e></m></meta>
		</INVALID_ENUM>
		<INVALID_VALUE final="1" public="1" set="null" expr="{ name : &quot;Invalid Value&quot;, description : &quot;Invalid value passed to AL call&quot; }" line="11" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "Invalid Value", description : "Invalid value passed to AL call" }</e></m></meta>
		</INVALID_VALUE>
		<INVALID_OPERATION final="1" public="1" set="null" expr="{ name : &quot;Invalid Operation&quot;, description : &quot;Illegal AL call&quot; }" line="12" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "Invalid Operation", description : "Illegal AL call" }</e></m></meta>
		</INVALID_OPERATION>
		<OUT_OF_MEMORY final="1" public="1" set="null" expr="{ name : &quot;Out of Memory&quot;, description : &quot;Not enough memory to execute the AL call&quot; }" line="13" static="1">
			<t path="haxeal.ALErrorDef"/>
			<meta><m n=":value"><e>{ name : "Out of Memory", description : "Not enough memory to execute the AL call" }</e></m></meta>
		</OUT_OF_MEMORY>
		<errorMap expr="[0 =&gt; NO_ERROR, 0xA001 =&gt; INVALID_NAME, 0xA002 =&gt; INVALID_ENUM, 0xA003 =&gt; INVALID_VALUE, 0xA004 =&gt; INVALID_OPERATION, 0xA005 =&gt; OUT_OF_MEMORY]" line="15" static="1">
			<t path="Map">
				<x path="Int"/>
				<t path="haxeal.ALErrorDef"/>
			</t>
			<meta><m n=":value"><e><![CDATA[[0 => NO_ERROR, 0xA001 => INVALID_NAME, 0xA002 => INVALID_ENUM, 0xA003 => INVALID_VALUE, 0xA004 => INVALID_OPERATION, 0xA005 => OUT_OF_MEMORY]]]></e></m></meta>
		</errorMap>
		<get public="1" set="method" line="30" static="1">
			<f a="id">
				<x path="Int"/>
				<t path="haxeal.ALErrorDef"/>
			</f>
			<haxe_doc>* Gets the error definition assigned to the given ID.
     * 
     * Returns null if theres no assigned definition
     * @param id ID to get definition for.</haxe_doc>
		</get>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxeal.ALDevice" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
		<haxe_doc>* Represents a device that allows audio playback.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALCaptureDevice" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<t path="haxeal.ALDevice"/>
		<haxe_doc>* Audio capture specific device.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALContext" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
		<haxe_doc>* Represents an OpenAL Context.</haxe_doc>
	</typedef>
	<typedef path="haxeal.FunctionAddress" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<d/>
		<haxe_doc>* Unused, represents a function address pointer</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALSource" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<x path="cpp.UInt32"/>
		<haxe_doc>* Represents a source audio can be played from using a buffer.
 * 
 * Set to 0 to mark as `null`.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALBuffer" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<x path="cpp.UInt32"/>
		<haxe_doc>* Represents a buffer audio data can be stored on to be played back on a source.
 * 
 * Set to 0 to mark as `null`.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALFilter" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<x path="cpp.UInt32"/>
		<haxe_doc>* Represents an EFX-Extension filter.
 * 
 * Set to 0 to mark as `null`.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALEffect" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<x path="cpp.UInt32"/>
		<haxe_doc>* Represents an EFX-Extension effect.
 * 
 * Set to 0 to mark as `null`.</haxe_doc>
	</typedef>
	<typedef path="haxeal.ALAuxSlot" params="" file="source/haxeal/ALObjects.hx" module="haxeal.ALObjects">
		<x path="cpp.UInt32"/>
		<haxe_doc>* Represents an EFX-Extension auxiliary effect slot.
 * 
 * Set to 0 to mark as `null`.</haxe_doc>
	</typedef>
	<class path="haxeal.HaxeAL" params="" file="source/haxeal/HaxeAL.hx">
		<NONE final="1" public="1" get="inline" set="null" expr="0" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<FALSE final="1" public="1" get="inline" set="null" expr="0" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</FALSE>
		<TRUE final="1" public="1" get="inline" set="null" expr="1" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</TRUE>
		<SOURCE_RELATIVE final="1" public="1" get="inline" set="null" expr="0x202" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x202</e></m></meta>
		</SOURCE_RELATIVE>
		<CONE_INNER_ANGLE final="1" public="1" get="inline" set="null" expr="0x1001" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1001</e></m></meta>
		</CONE_INNER_ANGLE>
		<CONE_OUTER_ANGLE final="1" public="1" get="inline" set="null" expr="0x1002" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</CONE_OUTER_ANGLE>
		<PITCH final="1" public="1" get="inline" set="null" expr="0x1003" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</PITCH>
		<POSITION final="1" public="1" get="inline" set="null" expr="0x1004" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</POSITION>
		<DIRECTION final="1" public="1" get="inline" set="null" expr="0x1005" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DIRECTION>
		<VELOCITY final="1" public="1" get="inline" set="null" expr="0x1006" line="22" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1006</e></m></meta>
		</VELOCITY>
		<LOOPING final="1" public="1" get="inline" set="null" expr="0x1007" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1007</e></m></meta>
		</LOOPING>
		<BUFFER final="1" public="1" get="inline" set="null" expr="0x1009" line="24" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</BUFFER>
		<GAIN final="1" public="1" get="inline" set="null" expr="0x100A" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100A</e></m></meta>
		</GAIN>
		<MIN_GAIN final="1" public="1" get="inline" set="null" expr="0x100D" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100D</e></m></meta>
		</MIN_GAIN>
		<MAX_GAIN final="1" public="1" get="inline" set="null" expr="0x100E" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100E</e></m></meta>
		</MAX_GAIN>
		<ORIENTATION final="1" public="1" get="inline" set="null" expr="0x100F" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100F</e></m></meta>
		</ORIENTATION>
		<SOURCE_STATE final="1" public="1" get="inline" set="null" expr="0x1010" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</SOURCE_STATE>
		<INITIAL final="1" public="1" get="inline" set="null" expr="0x1011" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</INITIAL>
		<PLAYING final="1" public="1" get="inline" set="null" expr="0x1012" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</PLAYING>
		<PAUSED final="1" public="1" get="inline" set="null" expr="0x1013" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</PAUSED>
		<STOPPED final="1" public="1" get="inline" set="null" expr="0x1014" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1014</e></m></meta>
		</STOPPED>
		<BUFFERS_QUEUED final="1" public="1" get="inline" set="null" expr="0x1015" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1015</e></m></meta>
		</BUFFERS_QUEUED>
		<BUFFERS_PROCESSED final="1" public="1" get="inline" set="null" expr="0x1016" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1016</e></m></meta>
		</BUFFERS_PROCESSED>
		<REFERENCE_DISTANCE final="1" public="1" get="inline" set="null" expr="0x1020" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1020</e></m></meta>
		</REFERENCE_DISTANCE>
		<ROLLOFF_FACTOR final="1" public="1" get="inline" set="null" expr="0x1021" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1021</e></m></meta>
		</ROLLOFF_FACTOR>
		<CONE_OUTER_GAIN final="1" public="1" get="inline" set="null" expr="0x1022" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1022</e></m></meta>
		</CONE_OUTER_GAIN>
		<MAX_DISTANCE final="1" public="1" get="inline" set="null" expr="0x1023" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1023</e></m></meta>
		</MAX_DISTANCE>
		<SEC_OFFSET final="1" public="1" get="inline" set="null" expr="0x1024" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1024</e></m></meta>
		</SEC_OFFSET>
		<SAMPLE_OFFSET final="1" public="1" get="inline" set="null" expr="0x1025" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1025</e></m></meta>
		</SAMPLE_OFFSET>
		<BYTE_OFFSET final="1" public="1" get="inline" set="null" expr="0x1026" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1026</e></m></meta>
		</BYTE_OFFSET>
		<SOURCE_TYPE final="1" public="1" get="inline" set="null" expr="0x1027" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1027</e></m></meta>
		</SOURCE_TYPE>
		<STATIC final="1" public="1" get="inline" set="null" expr="0x1028" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1028</e></m></meta>
		</STATIC>
		<STREAMING final="1" public="1" get="inline" set="null" expr="0x1029" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1029</e></m></meta>
		</STREAMING>
		<UNDETERMINED final="1" public="1" get="inline" set="null" expr="0x1030" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1030</e></m></meta>
		</UNDETERMINED>
		<FORMAT_MONO8 final="1" public="1" get="inline" set="null" expr="0x1100" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1100</e></m></meta>
		</FORMAT_MONO8>
		<FORMAT_MONO16 final="1" public="1" get="inline" set="null" expr="0x1101" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1101</e></m></meta>
		</FORMAT_MONO16>
		<FORMAT_STEREO8 final="1" public="1" get="inline" set="null" expr="0x1102" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1102</e></m></meta>
		</FORMAT_STEREO8>
		<FORMAT_STEREO16 final="1" public="1" get="inline" set="null" expr="0x1103" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1103</e></m></meta>
		</FORMAT_STEREO16>
		<FREQUENCY final="1" public="1" get="inline" set="null" expr="0x2001" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2001</e></m></meta>
		</FREQUENCY>
		<BITS final="1" public="1" get="inline" set="null" expr="0x2002" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2002</e></m></meta>
		</BITS>
		<CHANNELS final="1" public="1" get="inline" set="null" expr="0x2003" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2003</e></m></meta>
		</CHANNELS>
		<SIZE final="1" public="1" get="inline" set="null" expr="0x2004" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2004</e></m></meta>
		</SIZE>
		<UNUSED final="1" public="1" get="inline" set="null" expr="0x2010" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2010</e></m></meta>
		</UNUSED>
		<PENDING final="1" public="1" get="inline" set="null" expr="0x2011" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2011</e></m></meta>
		</PENDING>
		<PROCESSED final="1" public="1" get="inline" set="null" expr="0x2012" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2012</e></m></meta>
		</PROCESSED>
		<VENDOR final="1" public="1" get="inline" set="null" expr="0xB001" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB001</e></m></meta>
		</VENDOR>
		<VERSION final="1" public="1" get="inline" set="null" expr="0xB002" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB002</e></m></meta>
		</VERSION>
		<RENDERER final="1" public="1" get="inline" set="null" expr="0xB003" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB003</e></m></meta>
		</RENDERER>
		<EXTENSIONS final="1" public="1" get="inline" set="null" expr="0xB004" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xB004</e></m></meta>
		</EXTENSIONS>
		<DOPPLER_FACTOR final="1" public="1" get="inline" set="null" expr="0xC000" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC000</e></m></meta>
		</DOPPLER_FACTOR>
		<DOPPLER_VELOCITY final="1" public="1" get="inline" set="null" expr="0xC001" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC001</e></m></meta>
		</DOPPLER_VELOCITY>
		<SPEED_OF_SOUND final="1" public="1" get="inline" set="null" expr="0xC003" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xC003</e></m></meta>
		</SPEED_OF_SOUND>
		<DISTANCE_MODEL final="1" public="1" get="inline" set="null" expr="0xD000" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD000</e></m></meta>
		</DISTANCE_MODEL>
		<INVERSE_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD001" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD001</e></m></meta>
		</INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD002" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD002</e></m></meta>
		</INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD003" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD003</e></m></meta>
		</LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD004" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD004</e></m></meta>
		</LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD005" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD005</e></m></meta>
		</EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD006" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xD006</e></m></meta>
		</EXPONENT_DISTANCE_CLAMPED>
		<getParamMapping get="inline" set="null" line="87" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="cpp.Int8"/>
			</f>
			<haxe_doc>* Gets the amount of elements an array needs to store the information about the given parameter.
     * 
     * Default is 1.</haxe_doc>
		</getParamMapping>
		<enable public="1" set="method" line="94" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Enables the given capability.
     * @param capability Capability to enable.</haxe_doc>
		</enable>
		<disable public="1" set="method" line="100" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Disables the given capability.
     * @param capability Capability to disable.</haxe_doc>
		</disable>
		<isEnabled public="1" set="method" line="106" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given capability is enabled and returns `true` if so.
     * @param capability Capability to check.</haxe_doc>
		</isEnabled>
		<dopplerFactor public="1" set="method" line="117" static="1">
			<f a="value">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the value for AL's doppler factor.
     * 
     * Range:   [0.0 - POSITIVE_INFINITY]
     * 
     * Default: 1.0
     * @param value The value to set the doppler factor to.</haxe_doc>
		</dopplerFactor>
		<dopplerVelocity public="1" set="method" line="125" static="1">
			<f a="value">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the value for AL's (deprecated) doppler velocity.
     *
     * Acts as a multiplier applied to the Speed of Sound.
     * @param value The value to set the doppler velocity to.</haxe_doc>
		</dopplerVelocity>
		<speedOfSound public="1" set="method" line="135" static="1">
			<f a="value">
				<x path="Single"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets AL's speed of sound value, in units per second.
     * 
     * Range:   [0.0001 - POSITIVE_INFINITY]
     * 
     * Default: 343.3
     * @param value The value to set the speed of sound to.</haxe_doc>
		</speedOfSound>
		<distanceModel public="1" set="method" line="159" static="1">
			<f a="distanceModel">
				<x path="haxeal.DistanceModel"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets AL's distance attenuation model.
     *
     * Range:   [NONE, INVERSE_DISTANCE, INVERSE_DISTANCE_CLAMPED,
     *           LINEAR_DISTANCE, LINEAR_DISTANCE_CLAMPED,
     *           EXPONENT_DISTANCE, EXPONENT_DISTANCE_CLAMPED]
     * 
     * Default: INVERSE_DISTANCE_CLAMPED
     *
     * The model by which sources attenuate with distance.
     *
     * None     - No distance attenuation.
     * 
     * Inverse  - Doubling the distance halves the source gain.
     * 
     * Linear   - Linear gain scaling between the reference and max distances.
     * 
     * Exponent - Exponential gain dropoff.
     *
     * Clamped variations work like the non-clamped counterparts, except the
     * distance calculated is clamped between the reference and max distances.</haxe_doc>
		</distanceModel>
		<getString public="1" set="method" line="166" static="1">
			<f a="param">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a string value from the given AL parameter.
     * @param param Parameter to get value of.</haxe_doc>
		</getString>
		<getBoolean public="1" set="method" line="172" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns a boolean value from the given AL parameter.
     * @param param Parameter to get value of.</haxe_doc>
		</getBoolean>
		<getInteger public="1" set="method" line="178" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns an integer value from the given AL parameter.
     * @param param Parameter to get value of.</haxe_doc>
		</getInteger>
		<getFloat public="1" set="method" line="184" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Single"/>
			</f>
			<haxe_doc>* Returns a single precision floating point value from the given AL parameter. (Can be used as a regular Float aswell)
     * @param param Parameter to get value of.</haxe_doc>
		</getFloat>
		<getDouble public="1" set="method" line="190" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Returns a double precision floating point value from the given AL parameter.
     * @param param Parameter to get value of.</haxe_doc>
		</getDouble>
		<isExtensionPresent public="1" set="method" line="223" static="1">
			<f a="extName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if an extension by the given name is available on this context.
	 * @param extName Name of the extension to check for.</haxe_doc>
		</isExtensionPresent>
		<getProcAddress public="1" set="method" line="235" static="1">
			<f a="funcName">
				<c path="String"/>
				<d/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":deprecated"/>
			</meta>
			<haxe_doc>* Advanced usage function, gets the pointer to a function by name and returns it.
	 * 
	 * The returned function address can be casted to a defined function.
	 * 
	 * The defined function then acts as a caller for the pointed to function.
	 * 
	 * This function hasn't been tested and might not work as expected.
	 * @param funcName Name of the function you want to get. The function might be context specific.</haxe_doc>
		</getProcAddress>
		<getEnumValue public="1" set="method" line="244" static="1">
			<f a="enumName">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Retrieves an AL enum value (Integer) from the given name.
     * @param enumName The enum value to get.</haxe_doc>
		</getEnumValue>
		<listenerf public="1" set="method" line="252" static="1">
			<f a="param:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets a float value for the given parameter of the current listener object.
     * @param param Parameter to set value of.
     * @param value New float value for the parameter.</haxe_doc>
		</listenerf>
		<listener3f public="1" set="method" line="261" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three float values for the given parameter of the current listener object.
     * @param param Parameter to set values of.
     * @param value1 First float value for the parameter.
     * @param value2 Second float value for the parameter.
     * @param value3 Third float value for the parameter.</haxe_doc>
		</listener3f>
		<listenerfv public="1" set="method" line="268" static="1">
			<f a="param:values">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the given parameter of the current listener object.
     * @param param Parameter to set values of.
     * @param values New float values for the parameter as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</listenerfv>
		<listeneri public="1" set="method" line="275" static="1">
			<f a="param:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an integer value for the given parameter of the current listener object.
     * @param param Parameter to set value of.
     * @param value New integer value for the parameter.</haxe_doc>
		</listeneri>
		<listener3i public="1" set="method" line="284" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three integer values for the given parameter of the current listener object.
     * @param param Parameter to set values of.
     * @param value1 First integer value for the parameter.
     * @param value2 Second integer value for the parameter.
     * @param value3 Third integer value for the parameter.</haxe_doc>
		</listener3i>
		<listeneriv public="1" set="method" line="291" static="1">
			<f a="param:values">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the given parameter of the current listener object.
     * @param param Parameter to set values of.
     * @param values New integer values for the parameter as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</listeneriv>
		<getListenerf public="1" set="method" line="298" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Returns the current float value of the given param.
     * @param param Param to get value of.</haxe_doc>
		</getListenerf>
		<getListener3f public="1" set="method" line="308" static="1">
			<f a="param">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three float values from the given param.
     * @param param Param to get value of.</haxe_doc>
		</getListener3f>
		<getListenerfv public="1" set="method" line="321" static="1">
			<f a="param">
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values from the given param.
     * 
     * The array size depends on the given param.
     * @param param Param to get values of.</haxe_doc>
		</getListenerfv>
		<getListeneri public="1" set="method" line="334" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the current integer value of the given param.
     * @param param Param to get value of.</haxe_doc>
		</getListeneri>
		<getListener3i public="1" set="method" line="344" static="1">
			<f a="param">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three integer values from the given param.
     * @param param Param to get value of.</haxe_doc>
		</getListener3i>
		<getListeneriv public="1" set="method" line="357" static="1">
			<f a="param">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values from the given param.
     * 
     * The array size depends on the given param.
     * @param param Param to get values of.</haxe_doc>
		</getListeneriv>
		<createSources public="1" set="method" line="370" static="1">
			<f a="num">
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALSource"/></c>
			</f>
			<haxe_doc>* Returns an array of ALSources.
     * @param num Amount of sources to return.</haxe_doc>
		</createSources>
		<createSource public="1" set="method" line="386" static="1">
			<f a=""><t path="haxeal.ALSource"/></f>
			<haxe_doc>* Creates a source and returns it.</haxe_doc>
		</createSource>
		<deleteSources public="1" set="method" line="392" static="1">
			<f a="sources">
				<c path="Array"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes an array of ALSources.
     * @param sources Sources to delete.</haxe_doc>
		</deleteSources>
		<deleteSource public="1" set="method" line="401" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes a singular ALSource
     * @param source Source to delete.</haxe_doc>
		</deleteSource>
		<isSource public="1" set="method" line="407" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given source is a valid ALSource object.
     * @param source Source to check validity of.</haxe_doc>
		</isSource>
		<sourcePlay public="1" set="method" line="414" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Plays back audio from the sources buffer.
     * @param source Source to play audio from.</haxe_doc>
		</sourcePlay>
		<sourceStop public="1" set="method" line="420" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Completely stops audio-playback for the source and sets the sound position back to 0.
     * @param source Source to stop playback of.</haxe_doc>
		</sourceStop>
		<sourceRewind public="1" set="method" line="426" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Stops audio-playback for the source and sets its state to `HaxeAL.INITIAL`.
     * @param source Source to be rewound.</haxe_doc>
		</sourceRewind>
		<sourcePause public="1" set="method" line="432" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pauses audio-playback for the source, keeping the sound position unchanged.
     * @param source Source to pause playback of.</haxe_doc>
		</sourcePause>
		<sourcePlayv public="1" set="method" line="438" static="1">
			<f a="sources">
				<c path="Array"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Plays back audio from the sources' buffers.
     * @param sources Sources to play audio from.</haxe_doc>
		</sourcePlayv>
		<sourceStopv public="1" set="method" line="444" static="1">
			<f a="sources">
				<c path="Array"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Completely stops audio-playback for the sources and sets their sound position back to 0.
     * @param sources Sources to stop playback of.</haxe_doc>
		</sourceStopv>
		<sourceRewindv public="1" set="method" line="450" static="1">
			<f a="sources">
				<c path="Array"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Stops audio-playback for the sources and sets their state to `HaxeAL.INITIAL`.
     * @param sources Sources to be rewound.</haxe_doc>
		</sourceRewindv>
		<sourcePausev public="1" set="method" line="456" static="1">
			<f a="sources">
				<c path="Array"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pauses audio-playback for the sources, keeping their sound position unchanged.
     * @param sources Sources to pause playback of.</haxe_doc>
		</sourcePausev>
		<sourceQueueBuffers public="1" set="method" line="464" static="1">
			<f a="source:buffers">
				<t path="haxeal.ALSource"/>
				<c path="Array"><t path="haxeal.ALBuffer"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Queues the buffers' data to be played chronologically 
     * once the data for the current buffer has finished playing back on the source.
     * @param source Source to queue buffers for.
     * @param buffers Buffers to be played back chronologically.</haxe_doc>
		</sourceQueueBuffers>
		<sourceUnqueueBuffers public="1" set="method" line="474" static="1">
			<f a="source:numBuffers">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALBuffer"/></c>
			</f>
			<haxe_doc>* Unqueues the given number of processed buffers and returns the now available (unqueued) buffers.
     * 
     * If numBuffers is larger than the amount of processed buffers (the ones already played back) on the source 
     * (aquired using `getSourcei` with `BUFFERS_PROCESSED`) the operation will fail!
     * @param source Source to unqueue buffers of.
     * @param numBuffers The amount of buffers to unqueue.</haxe_doc>
		</sourceUnqueueBuffers>
		<sourcef public="1" set="method" line="487" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the float value for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set value of.
     * @param value New float value of the param.</haxe_doc>
		</sourcef>
		<source3f public="1" set="method" line="497" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three float values for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set values of.
     * @param value1 First new float value of the param.
     * @param value2 Second new float value of the param.
     * @param value3 Third new float value of the param.</haxe_doc>
		</source3f>
		<sourcefv public="1" set="method" line="505" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set values of.
     * @param value New float values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</sourcefv>
		<sourcei public="1" set="method" line="513" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the integer value for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set value of.
     * @param value New integer value of the param.</haxe_doc>
		</sourcei>
		<source3i public="1" set="method" line="523" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three integer values for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set values of.
     * @param value1 First new integer value of the param.
     * @param value2 Second new integer value of the param.
     * @param value3 Third new integer value of the param.</haxe_doc>
		</source3i>
		<sourceiv public="1" set="method" line="531" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the target parameter of the given source.
     * @param source Source to change parameter of.
     * @param param Param to set values of.
     * @param value New integer values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</sourceiv>
		<getSourcef public="1" set="method" line="539" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Gets the float value for the target parameter of the given source.
     * @param source Source to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getSourcef>
		<getSource3f public="1" set="method" line="550" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three float values for the target parameter of the given source.
     * @param source Source to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getSource3f>
		<getSourcefv public="1" set="method" line="564" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values for the target parameter of the given source.
     * 
     * The array size depends on the given param.
     * @param source Source to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getSourcefv>
		<getSourcei public="1" set="method" line="578" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the integer value for the target parameter of the given source.
     * @param source Source to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getSourcei>
		<getSource3i public="1" set="method" line="589" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three integer values for the target parameter of the given source.
     * @param source Source to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getSource3i>
		<getSourceiv public="1" set="method" line="603" static="1">
			<f a="source:param">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values for the target parameter of the given source.
     * 
     * The array size depends on the given param.
     * @param source Source to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getSourceiv>
		<createBuffers public="1" set="method" line="617" static="1">
			<f a="num">
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALBuffer"/></c>
			</f>
			<haxe_doc>* Returns an array of ALBuffers.
     * @param num Amount of buffers to return.</haxe_doc>
		</createBuffers>
		<createBuffer public="1" set="method" line="633" static="1">
			<f a=""><t path="haxeal.ALBuffer"/></f>
			<haxe_doc>* Creates a buffer and returns it.</haxe_doc>
		</createBuffer>
		<deleteBuffers public="1" set="method" line="639" static="1">
			<f a="buffers">
				<c path="Array"><t path="haxeal.ALBuffer"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes an array of ALBuffers.
     * @param buffers Buffers to delete.</haxe_doc>
		</deleteBuffers>
		<deleteBuffer public="1" set="method" line="648" static="1">
			<f a="buffer">
				<t path="haxeal.ALBuffer"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes a singular ALBuffer
     * @param buffer Buffer to delete.</haxe_doc>
		</deleteBuffer>
		<isBuffer public="1" set="method" line="654" static="1">
			<f a="buffer">
				<t path="haxeal.ALBuffer"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given buffer is a valid ALBuffer object.
     * @param buffer Buffer to check validity of.</haxe_doc>
		</isBuffer>
		<bufferData public="1" set="method" line="664" static="1">
			<f a="buffer:format:data:size:sampleRate">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills the given buffer with all information necessary for playback.
     * @param buffer The ALBuffer to fill with information.
     * @param format The AL format the data should be stored under (Ex: HaxeAL.FORMAT_STEREO16).
     * @param data The data to be fed as bytes.
     * @param size Size of the data to be fed, here this should be `data.length`.
     * @param sampleRate The samplerate the data should be played back at.</haxe_doc>
		</bufferData>
		<bufferData_PCM public="1" set="method" line="681" static="1">
			<f a="buffer:format:data:size:sampleRate">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Fills the given buffer with all information necessary for playback, used to handle raw PCM data.
     * @param buffer The ALBuffer to fill with information.
     * @param format The AL format the data should be stored under (Ex: HaxeAL.FORMAT_MONO16).
     * @param data The data to be fed as raw pcm data in the form a raw cpp Void pointer.
     * @param size Size of the data to be fed. 
     * By default this is simply the amount of samples the `data` points to.
     * If your format is stereo (2 channel), you should multiply the sample value by 2.
     * If your format is 16 bit, you should multiply the value by 2 again.
     * These multiplications stack, meaning with a STEREO16 format your size should be `samples * 2 * 2`.
     * @param sampleRate The samplerate the data should be played back at.</haxe_doc>
		</bufferData_PCM>
		<bufferf public="1" set="method" line="692" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the float value for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set value of.
     * @param value New float value of the param.</haxe_doc>
		</bufferf>
		<buffer3f public="1" set="method" line="702" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three float values for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set values of.
     * @param value1 First new float value of the param.
     * @param value2 Second new float value of the param.
     * @param value3 Third new float value of the param.</haxe_doc>
		</buffer3f>
		<bufferfv public="1" set="method" line="710" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set values of.
     * @param value New float values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</bufferfv>
		<bufferi public="1" set="method" line="718" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the integer value for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set value of.
     * @param value New integer value of the param.</haxe_doc>
		</bufferi>
		<buffer3i public="1" set="method" line="728" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets three integer values for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set values of.
     * @param value1 First new integer value of the param.
     * @param value2 Second new integer value of the param.
     * @param value3 Third new integer value of the param.</haxe_doc>
		</buffer3i>
		<bufferiv public="1" set="method" line="736" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the target parameter of the given buffer.
     * @param buffer Buffer to change parameter of.
     * @param param Param to set values of.
     * @param value New integer values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</bufferiv>
		<getBufferf public="1" set="method" line="744" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Gets the float value for the target parameter of the given buffer.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getBufferf>
		<getBuffer3f public="1" set="method" line="755" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three float values for the target parameter of the given buffer.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getBuffer3f>
		<getBufferfv public="1" set="method" line="769" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values for the target parameter of the given buffer.
     * 
     * The array size depends on the given param.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getBufferfv>
		<getBufferi public="1" set="method" line="783" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the integer value for the target parameter of the given buffer.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getBufferi>
		<getBuffer3i public="1" set="method" line="794" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>* Returns an array of three integer values for the target parameter of the given buffer.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getBuffer3i>
		<getBufferiv public="1" set="method" line="808" static="1">
			<f a="buffer:param">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values for the target parameter of the given buffer.
     * 
     * The array size depends on the given param.
     * @param buffer Buffer to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getBufferiv>
		<getError public="1" set="method" line="824" static="1">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Checks for any OpenAL errors and returns the ID of the error code.
     * 
     * The definition can be logged to the console using `getErrorString` or obtained as a variable using `getErrorDefinition`.</haxe_doc>
		</getError>
		<getErrorString public="1" get="inline" set="null" line="832" static="1">
			<f a="error">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Logs the definition of an error code to the console.
     * 
     * The created log is only a more tidy version of tracing `getErrorDefinition`.
     * @param error Error code obtained through `getError`</haxe_doc>
		</getErrorString>
		<getErrorDefinition public="1" get="inline" set="null" line="841" static="1">
			<f a="error">
				<x path="Int"/>
				<t path="haxeal.ALErrorDef"/>
			</f>
			<haxe_doc>* Gets the definition of an error code and returns it.
     * @param error Error code obtained through `getError`</haxe_doc>
		</getErrorDefinition>
		<haxe_doc>* Main class for handling HaxeAL Soft operations such as playback.</haxe_doc>
	</class>
	<class path="haxeal._HaxeAL.DistanceModel_Impl_" params="" file="source/haxeal/HaxeAL.hx" private="1" module="haxeal.HaxeAL" final="1">
		<NONE final="1" public="1" get="inline" set="null" expr="0" line="845" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</NONE>
		<INVERSE_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD001" line="846" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD001</e></m></meta>
		</INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD002" line="847" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD002</e></m></meta>
		</INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD003" line="848" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD003</e></m></meta>
		</LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD004" line="849" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD004</e></m></meta>
		</LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE final="1" public="1" get="inline" set="null" expr="0xD005" line="850" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD005</e></m></meta>
		</EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED final="1" public="1" get="inline" set="null" expr="0xD006" line="851" static="1">
			<x path="haxeal.DistanceModel"/>
			<meta><m n=":value"><e>0xD006</e></m></meta>
		</EXPONENT_DISTANCE_CLAMPED>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="haxeal.HaxeALC" params="" file="source/haxeal/HaxeALC.hx">
		<FREQUENCY final="1" public="1" get="inline" set="null" expr="0x1007" line="25" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1007</e></m></meta>
		</FREQUENCY>
		<REFRESH final="1" public="1" get="inline" set="null" expr="0x1008" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1008</e></m></meta>
		</REFRESH>
		<SYNC final="1" public="1" get="inline" set="null" expr="0x1009" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1009</e></m></meta>
		</SYNC>
		<MONO_SOURCES final="1" public="1" get="inline" set="null" expr="0x1010" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1010</e></m></meta>
		</MONO_SOURCES>
		<STEREO_SOURCES final="1" public="1" get="inline" set="null" expr="0x1011" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1011</e></m></meta>
		</STEREO_SOURCES>
		<MAJOR_VERSION final="1" public="1" get="inline" set="null" expr="0x1000" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1000</e></m></meta>
		</MAJOR_VERSION>
		<MINOR_VERSION final="1" public="1" get="inline" set="null" expr="0x1001" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1001</e></m></meta>
		</MINOR_VERSION>
		<ATTRIBUTES_SIZE final="1" public="1" get="inline" set="null" expr="0x1002" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1002</e></m></meta>
		</ATTRIBUTES_SIZE>
		<ALL_ATTRIBUTES final="1" public="1" get="inline" set="null" expr="0x1003" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1003</e></m></meta>
		</ALL_ATTRIBUTES>
		<DEFAULT_DEVICE_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x1004" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1004</e></m></meta>
		</DEFAULT_DEVICE_SPECIFIER>
		<DEVICE_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x1005" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1005</e></m></meta>
		</DEVICE_SPECIFIER>
		<EXTENSIONS final="1" public="1" get="inline" set="null" expr="0x1006" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1006</e></m></meta>
		</EXTENSIONS>
		<EXT_CAPTURE final="1" public="1" get="inline" set="null" expr="1" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</EXT_CAPTURE>
		<CAPTURE_DEVICE_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x310" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x310</e></m></meta>
		</CAPTURE_DEVICE_SPECIFIER>
		<CAPTURE_DEFAULT_DEVICE_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x311" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x311</e></m></meta>
		</CAPTURE_DEFAULT_DEVICE_SPECIFIER>
		<CAPTURE_SAMPLES final="1" public="1" get="inline" set="null" expr="0x312" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x312</e></m></meta>
		</CAPTURE_SAMPLES>
		<ENUMERATE_ALL_EXT final="1" public="1" get="inline" set="null" expr="1" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ENUMERATE_ALL_EXT>
		<DEFAULT_ALL_DEVICES_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x1012" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1012</e></m></meta>
		</DEFAULT_ALL_DEVICES_SPECIFIER>
		<ALL_DEVICES_SPECIFIER final="1" public="1" get="inline" set="null" expr="0x1013" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1013</e></m></meta>
		</ALL_DEVICES_SPECIFIER>
		<createContext public="1" set="method" line="52" static="1">
			<f a="device:?attributes">
				<t path="haxeal.ALDevice"/>
				<c path="Array"><x path="Int"/></c>
				<t path="haxeal.ALContext"/>
			</f>
			<haxe_doc>* Creates a context on the given device with the given attributes and returns it.
	 * @param device Device to create context on.
	 * @param attributes Attributes to set for the context (format: [ATTRIBUTE_PARAM, VALUE, ATTRIBUTE_PARAM2, VALUE2...])</haxe_doc>
		</createContext>
		<makeContextCurrent public="1" set="method" line="62" static="1">
			<f a="context">
				<t path="haxeal.ALContext"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Sets the given context as the current OpenAL context.
	 * 
	 * Returns whether this operation was successful or not.
	 * @param context Context to set as "current".</haxe_doc>
		</makeContextCurrent>
		<getCurrentContext public="1" set="method" line="67" static="1">
			<f a=""><t path="haxeal.ALContext"/></f>
			<haxe_doc>* Returns the current OpenAL context.</haxe_doc>
		</getCurrentContext>
		<processContext public="1" set="method" line="73" static="1">
			<f a="context">
				<t path="haxeal.ALContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Tells the given context to begin processing. 
	 * @param context Context to start processing on.</haxe_doc>
		</processContext>
		<suspendContext public="1" set="method" line="79" static="1">
			<f a="context">
				<t path="haxeal.ALContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Suspends processing on the given context.
	 * @param context Context to suspend processing on.</haxe_doc>
		</suspendContext>
		<destroyContext public="1" set="method" line="85" static="1">
			<f a="context">
				<t path="haxeal.ALContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Destroys the given context.
	 * @param context Context to destroy.</haxe_doc>
		</destroyContext>
		<getDeviceFromContext public="1" set="method" line="93" static="1">
			<f a="context">
				<t path="haxeal.ALContext"/>
				<t path="haxeal.ALDevice"/>
			</f>
			<haxe_doc>* Gets the device related to the given context and returns it.
	 * @param context The context to get the device from.</haxe_doc>
		</getDeviceFromContext>
		<openDevice public="1" set="method" line="99" static="1">
			<f a="deviceName">
				<c path="String"/>
				<t path="haxeal.ALDevice"/>
			</f>
			<haxe_doc>* Opens a device by name and returns the created device.
	 * @param deviceName Name of the device you want to open (default device name can be gotten using `getString`)</haxe_doc>
		</openDevice>
		<closeDevice public="1" set="method" line="105" static="1">
			<f a="device">
				<t path="haxeal.ALDevice"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Closes the given device and returns whether the operation was successful/valid or not.
	 * @param device Device you want to close.</haxe_doc>
		</closeDevice>
		<isExtensionPresent public="1" set="method" line="114" static="1">
			<f a="?device:extName">
				<x path="Null"><t path="haxeal.ALDevice"/></x>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Returns true if an extension by the given name is available on the given device.
	 * @param device Extension related device, can be left as null if the extension isnt device specific.
	 * @param extName Name of the extension to check for.</haxe_doc>
		</isExtensionPresent>
		<getEnumValue public="1" set="method" line="134" static="1">
			<f a="?device:enumName">
				<x path="Null"><t path="haxeal.ALDevice"/></x>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Retrieves an AL enum value (Integer) from the given name.
	 * @param device Enum related device, can be left as null if the enum isnt device specific.
     * @param enumName The enum value to get.</haxe_doc>
		</getEnumValue>
		<openCaptureDevice public="1" set="method" line="147" static="1">
			<f a="deviceName:?captureFrequency:?captureFormat:?bufferSize" v=":44100:HaxeAL.FORMAT_MONO16:22050">
				<x path="cpp.ConstCharStar"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="haxeal.ALCaptureDevice"/>
			</f>
			<meta><m n=":value"><e>{ bufferSize : 22050, captureFormat : HaxeAL.FORMAT_MONO16, captureFrequency : 44100 }</e></m></meta>
			<haxe_doc>* Opens a device dedicated to audio recording by name with the given recording properties and returns it.
	 * @param deviceName Name of the recording device you want to open 
	 * (default device name can be gotten using `getString` with argument `CAPTURE_DEFAULT_DEVICE_SPECIFIER`).
	 * @param captureFrequency The frequency at which to capture audio, standard is 44100.
	 * @param captureFormat The format at which to capture audio, standard is 16 bit mono.
	 * @param bufferSize The size of the recording buffer, in which recorded data will be stored (until retrieved via `captureSamples`).
	 * The default is 22050, half of the standard frequency, so in this case half a second.</haxe_doc>
		</openCaptureDevice>
		<closeCaptureDevice public="1" set="method" line="155" static="1">
			<f a="device">
				<t path="haxeal.ALCaptureDevice"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Closes the given audio recording device and returns whether the operation was successful/valid or not.
	 * @param device Device you want to close.</haxe_doc>
		</closeCaptureDevice>
		<startCapture public="1" set="method" line="163" static="1">
			<f a="device">
				<t path="haxeal.ALCaptureDevice"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Starts capturing audio samples on the given device.
	 * @param device Device to start capturing on.</haxe_doc>
		</startCapture>
		<stopCapture public="1" set="method" line="169" static="1">
			<f a="device">
				<t path="haxeal.ALCaptureDevice"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Stops capturing audio samples on the given device.
	 * @param device Device to stop capturing on.</haxe_doc>
		</stopCapture>
		<captureSamples public="1" set="method" line="183" static="1">
			<f a="device:samples:?byteLength" v="::1">
				<t path="haxeal.ALCaptureDevice"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ byteLength : 1 }</e></m>
			</meta>
			<haxe_doc>* Collects captured data from a devices' capture buffer and returns it as a raw cpp pointer (use `HaxeAL.bufferData_PCM` with this data).
	 * 
	 * The underlying type of the raw cpp pointer is dependant on the devices' captureFormat (UInt8 if MONO8 or STEREO8, otherwise Int16)
	 * @param device Device to retrieve audio from.
	 * @param samples The amount of samples to retrieve. This amount should not be higher than `getIntegers(device, ALC_CAPTURE_SAMPLES, 1)`.
	 * The amount of time that a block of samples represents is relatives to the input devices' capturing frequency (22050 samples to retrieve at 44100hz would be 0.5 seconds)
	 * @param byteLength By default this value is 1 (FORMAT_MONO8).
     * If your format is stereo (2 channel), you should multiply this value by 2.
     * If your format is 16 bit, you should multiply the value by 2 again.
     * These multiplications stack, meaning with a STEREO16 format your byteLength should be `4`.</haxe_doc>
		</captureSamples>
		<getString public="1" set="method" line="197" static="1">
			<f a="?device:param">
				<x path="Null"><t path="haxeal.ALDevice"/></x>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets the string value of the given parameter and returns it.
	 * 
	 * If `device` isnt null, a device parameter can be obtained.
	 * @param device The device to receive the parameter of, if the parameter is tied to a device. Leave null otherwise.
	 * @param param Parameter to get</haxe_doc>
		</getString>
		<getError public="1" set="method" line="203" static="1">
			<f a="?device">
				<x path="Null"><t path="haxeal.ALDevice"/></x>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns a device-specific error code, if there is any error.
	 * @param device Device to check on for errors.</haxe_doc>
		</getError>
		<getIntegers public="1" set="method" line="211" static="1">
			<f a="device:param:argumentCount">
				<t path="haxeal.ALDevice"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns integers related to the given parameter of the current context for the `device` (or none if its not device specific).
	 * @param device Device for device specific integer values
	 * @param param Parameter to get values of
	 * @param argumentCount Amount of array objects you expect to return</haxe_doc>
		</getIntegers>
		<haxe_doc>* Class for handling the HaxeAL Context.</haxe_doc>
		<meta><m n=":headerCode"><e><![CDATA["\r\n    #include <al.h>\r\n\t#include <hxcpp.h>\r\n\t#include <hx/CFFI.h>\r\n\t#include <hx/CFFIPrime.h>\r\n\t#include <Array.h>\r\n\r\n\t#include <iostream>\r\n\tusing namespace std;\r\n"]]></e></m></meta>
	</class>
	<class path="haxeal.HaxeEFX" params="" file="source/haxeal/HaxeEFX.hx">
		<EXT_EFX_NAME final="1" public="1" get="inline" set="null" expr="&quot;EXT_EFX&quot;" line="17" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"EXT_EFX"</e></m></meta>
		</EXT_EFX_NAME>
		<EFX_MAJOR_VERSION final="1" public="1" get="inline" set="null" expr="0x20001" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20001</e></m></meta>
		</EFX_MAJOR_VERSION>
		<EFX_MINOR_VERSION final="1" public="1" get="inline" set="null" expr="0x20002" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20002</e></m></meta>
		</EFX_MINOR_VERSION>
		<MAX_AUXILIARY_SENDS final="1" public="1" get="inline" set="null" expr="0x20003" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20003</e></m></meta>
		</MAX_AUXILIARY_SENDS>
		<METERS_PER_UNIT final="1" public="1" get="inline" set="null" expr="0x20004" line="23" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20004</e></m></meta>
		</METERS_PER_UNIT>
		<DIRECT_FILTER final="1" public="1" get="inline" set="null" expr="0x20005" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20005</e></m></meta>
		</DIRECT_FILTER>
		<AUXILIARY_SEND_FILTER final="1" public="1" get="inline" set="null" expr="0x20006" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20006</e></m></meta>
		</AUXILIARY_SEND_FILTER>
		<AIR_ABSORPTION_FACTOR final="1" public="1" get="inline" set="null" expr="0x20007" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20007</e></m></meta>
		</AIR_ABSORPTION_FACTOR>
		<ROOM_ROLLOFF_FACTOR final="1" public="1" get="inline" set="null" expr="0x20008" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20008</e></m></meta>
		</ROOM_ROLLOFF_FACTOR>
		<CONE_OUTER_GAINHF final="1" public="1" get="inline" set="null" expr="0x20009" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20009</e></m></meta>
		</CONE_OUTER_GAINHF>
		<DIRECT_FILTER_GAINHF_AUTO final="1" public="1" get="inline" set="null" expr="0x2000A" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000A</e></m></meta>
		</DIRECT_FILTER_GAINHF_AUTO>
		<AUXILIARY_SEND_FILTER_GAIN_AUTO final="1" public="1" get="inline" set="null" expr="0x2000B" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000B</e></m></meta>
		</AUXILIARY_SEND_FILTER_GAIN_AUTO>
		<AUXILIARY_SEND_FILTER_GAINHF_AUTO final="1" public="1" get="inline" set="null" expr="0x2000C" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2000C</e></m></meta>
		</AUXILIARY_SEND_FILTER_GAINHF_AUTO>
		<EFFECT_FIRST_PARAMETER final="1" public="1" get="inline" set="null" expr="0x0000" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</EFFECT_FIRST_PARAMETER>
		<EFFECT_LAST_PARAMETER final="1" public="1" get="inline" set="null" expr="0x8000" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</EFFECT_LAST_PARAMETER>
		<EFFECT_TYPE final="1" public="1" get="inline" set="null" expr="0x8001" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</EFFECT_TYPE>
		<EFFECT_NULL final="1" public="1" get="inline" set="null" expr="0x0000" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</EFFECT_NULL>
		<EFFECT_EAXREVERB final="1" public="1" get="inline" set="null" expr="0x8000" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</EFFECT_EAXREVERB>
		<EAXREVERB_DIFFUSION final="1" public="1" get="inline" set="null" expr="0x0002" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EAXREVERB_DIFFUSION>
		<EAXREVERB_GAIN final="1" public="1" get="inline" set="null" expr="0x0003" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EAXREVERB_GAIN>
		<EAXREVERB_DENSITY final="1" public="1" get="inline" set="null" expr="0x0001" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EAXREVERB_DENSITY>
		<EAXREVERB_GAINHF final="1" public="1" get="inline" set="null" expr="0x0004" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EAXREVERB_GAINHF>
		<EAXREVERB_GAINLF final="1" public="1" get="inline" set="null" expr="0x0005" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EAXREVERB_GAINLF>
		<EAXREVERB_DECAY_TIME final="1" public="1" get="inline" set="null" expr="0x0006" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EAXREVERB_DECAY_TIME>
		<EAXREVERB_DECAY_HFRATIO final="1" public="1" get="inline" set="null" expr="0x0007" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EAXREVERB_DECAY_HFRATIO>
		<EAXREVERB_DECAY_LFRATIO final="1" public="1" get="inline" set="null" expr="0x0008" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EAXREVERB_DECAY_LFRATIO>
		<EAXREVERB_REFLECTIONS_GAIN final="1" public="1" get="inline" set="null" expr="0x0009" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EAXREVERB_REFLECTIONS_GAIN>
		<EAXREVERB_REFLECTIONS_DELAY final="1" public="1" get="inline" set="null" expr="0x000A" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</EAXREVERB_REFLECTIONS_DELAY>
		<EAXREVERB_REFLECTIONS_PAN final="1" public="1" get="inline" set="null" expr="0x000B" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</EAXREVERB_REFLECTIONS_PAN>
		<EAXREVERB_LATE_REVERB_GAIN final="1" public="1" get="inline" set="null" expr="0x000C" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</EAXREVERB_LATE_REVERB_GAIN>
		<EAXREVERB_LATE_REVERB_DELAY final="1" public="1" get="inline" set="null" expr="0x000D" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000D</e></m></meta>
		</EAXREVERB_LATE_REVERB_DELAY>
		<EAXREVERB_LATE_REVERB_PAN final="1" public="1" get="inline" set="null" expr="0x000E" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000E</e></m></meta>
		</EAXREVERB_LATE_REVERB_PAN>
		<EAXREVERB_ECHO_TIME final="1" public="1" get="inline" set="null" expr="0x000F" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000F</e></m></meta>
		</EAXREVERB_ECHO_TIME>
		<EAXREVERB_ECHO_DEPTH final="1" public="1" get="inline" set="null" expr="0x0010" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0010</e></m></meta>
		</EAXREVERB_ECHO_DEPTH>
		<EAXREVERB_MODULATION_TIME final="1" public="1" get="inline" set="null" expr="0x0011" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0011</e></m></meta>
		</EAXREVERB_MODULATION_TIME>
		<EAXREVERB_MODULATION_DEPTH final="1" public="1" get="inline" set="null" expr="0x0012" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0012</e></m></meta>
		</EAXREVERB_MODULATION_DEPTH>
		<EAXREVERB_AIR_ABSORPTION_GAINHF final="1" public="1" get="inline" set="null" expr="0x0013" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0013</e></m></meta>
		</EAXREVERB_AIR_ABSORPTION_GAINHF>
		<EAXREVERB_HFREFERENCE final="1" public="1" get="inline" set="null" expr="0x0014" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0014</e></m></meta>
		</EAXREVERB_HFREFERENCE>
		<EAXREVERB_LFREFERENCE final="1" public="1" get="inline" set="null" expr="0x0015" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0015</e></m></meta>
		</EAXREVERB_LFREFERENCE>
		<EAXREVERB_ROOM_ROLLOFF_FACTOR final="1" public="1" get="inline" set="null" expr="0x0016" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0016</e></m></meta>
		</EAXREVERB_ROOM_ROLLOFF_FACTOR>
		<EAXREVERB_DECAY_HFLIMIT final="1" public="1" get="inline" set="null" expr="0x0017" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0017</e></m></meta>
		</EAXREVERB_DECAY_HFLIMIT>
		<EFFECT_REVERB final="1" public="1" get="inline" set="null" expr="0x0001" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EFFECT_REVERB>
		<REVERB_DENSITY final="1" public="1" get="inline" set="null" expr="0x0001" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</REVERB_DENSITY>
		<REVERB_DIFFUSION final="1" public="1" get="inline" set="null" expr="0x0002" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</REVERB_DIFFUSION>
		<REVERB_GAIN final="1" public="1" get="inline" set="null" expr="0x0003" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</REVERB_GAIN>
		<REVERB_GAINHF final="1" public="1" get="inline" set="null" expr="0x0004" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</REVERB_GAINHF>
		<REVERB_DECAY_TIME final="1" public="1" get="inline" set="null" expr="0x0005" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</REVERB_DECAY_TIME>
		<REVERB_DECAY_HFRATIO final="1" public="1" get="inline" set="null" expr="0x0006" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</REVERB_DECAY_HFRATIO>
		<REVERB_REFLECTIONS_GAIN final="1" public="1" get="inline" set="null" expr="0x0007" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</REVERB_REFLECTIONS_GAIN>
		<REVERB_REFLECTIONS_DELAY final="1" public="1" get="inline" set="null" expr="0x0008" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</REVERB_REFLECTIONS_DELAY>
		<REVERB_LATE_REVERB_GAIN final="1" public="1" get="inline" set="null" expr="0x0009" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</REVERB_LATE_REVERB_GAIN>
		<REVERB_LATE_REVERB_DELAY final="1" public="1" get="inline" set="null" expr="0x000A" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</REVERB_LATE_REVERB_DELAY>
		<REVERB_AIR_ABSORPTION_GAINHF final="1" public="1" get="inline" set="null" expr="0x000B" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</REVERB_AIR_ABSORPTION_GAINHF>
		<REVERB_ROOM_ROLLOFF_FACTOR final="1" public="1" get="inline" set="null" expr="0x000C" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</REVERB_ROOM_ROLLOFF_FACTOR>
		<REVERB_DECAY_HFLIMIT final="1" public="1" get="inline" set="null" expr="0x000D" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000D</e></m></meta>
		</REVERB_DECAY_HFLIMIT>
		<EFFECT_CHORUS final="1" public="1" get="inline" set="null" expr="0x0002" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EFFECT_CHORUS>
		<CHORUS_WAVEFORM final="1" public="1" get="inline" set="null" expr="0x0001" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</CHORUS_WAVEFORM>
		<CHORUS_PHASE final="1" public="1" get="inline" set="null" expr="0x0002" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</CHORUS_PHASE>
		<CHORUS_RATE final="1" public="1" get="inline" set="null" expr="0x0003" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</CHORUS_RATE>
		<CHORUS_DEPTH final="1" public="1" get="inline" set="null" expr="0x0004" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</CHORUS_DEPTH>
		<CHORUS_FEEDBACK final="1" public="1" get="inline" set="null" expr="0x0005" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</CHORUS_FEEDBACK>
		<CHORUS_DELAY final="1" public="1" get="inline" set="null" expr="0x0006" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</CHORUS_DELAY>
		<EFFECT_DISTORTION final="1" public="1" get="inline" set="null" expr="0x0003" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EFFECT_DISTORTION>
		<DISTORTION_EDGE final="1" public="1" get="inline" set="null" expr="0x0001" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</DISTORTION_EDGE>
		<DISTORTION_GAIN final="1" public="1" get="inline" set="null" expr="0x0002" line="102" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</DISTORTION_GAIN>
		<DISTORTION_LOWPASS_CUTOFF final="1" public="1" get="inline" set="null" expr="0x0003" line="103" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</DISTORTION_LOWPASS_CUTOFF>
		<DISTORTION_EQCENTER final="1" public="1" get="inline" set="null" expr="0x0004" line="104" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</DISTORTION_EQCENTER>
		<DISTORTION_EQBANDWIDTH final="1" public="1" get="inline" set="null" expr="0x0005" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</DISTORTION_EQBANDWIDTH>
		<EFFECT_ECHO final="1" public="1" get="inline" set="null" expr="0x0004" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EFFECT_ECHO>
		<ECHO_DELAY final="1" public="1" get="inline" set="null" expr="0x0001" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</ECHO_DELAY>
		<ECHO_LRDELAY final="1" public="1" get="inline" set="null" expr="0x0002" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</ECHO_LRDELAY>
		<ECHO_DAMPING final="1" public="1" get="inline" set="null" expr="0x0003" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</ECHO_DAMPING>
		<ECHO_FEEDBACK final="1" public="1" get="inline" set="null" expr="0x0004" line="113" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</ECHO_FEEDBACK>
		<ECHO_SPREAD final="1" public="1" get="inline" set="null" expr="0x0005" line="114" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</ECHO_SPREAD>
		<EFFECT_FLANGER final="1" public="1" get="inline" set="null" expr="0x0005" line="117" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EFFECT_FLANGER>
		<FLANGER_WAVEFORM final="1" public="1" get="inline" set="null" expr="0x0001" line="119" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FLANGER_WAVEFORM>
		<FLANGER_PHASE final="1" public="1" get="inline" set="null" expr="0x0002" line="120" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FLANGER_PHASE>
		<FLANGER_RATE final="1" public="1" get="inline" set="null" expr="0x0003" line="121" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FLANGER_RATE>
		<FLANGER_DEPTH final="1" public="1" get="inline" set="null" expr="0x0004" line="122" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</FLANGER_DEPTH>
		<FLANGER_FEEDBACK final="1" public="1" get="inline" set="null" expr="0x0005" line="123" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</FLANGER_FEEDBACK>
		<FLANGER_DELAY final="1" public="1" get="inline" set="null" expr="0x0006" line="124" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</FLANGER_DELAY>
		<EFFECT_FREQUENCY_SHIFTER final="1" public="1" get="inline" set="null" expr="0x0006" line="127" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EFFECT_FREQUENCY_SHIFTER>
		<FREQUENCY_SHIFTER_FREQUENCY final="1" public="1" get="inline" set="null" expr="0x0001" line="129" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FREQUENCY_SHIFTER_FREQUENCY>
		<FREQUENCY_SHIFTER_LEFT_DIRECTION final="1" public="1" get="inline" set="null" expr="0x0002" line="130" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FREQUENCY_SHIFTER_LEFT_DIRECTION>
		<FREQUENCY_SHIFTER_RIGHT_DIRECTION final="1" public="1" get="inline" set="null" expr="0x0003" line="131" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FREQUENCY_SHIFTER_RIGHT_DIRECTION>
		<EFFECT_VOCAL_MORPHER final="1" public="1" get="inline" set="null" expr="0x0007" line="134" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EFFECT_VOCAL_MORPHER>
		<VOCAL_MORPHER_PHONEMEA final="1" public="1" get="inline" set="null" expr="0x0001" line="136" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</VOCAL_MORPHER_PHONEMEA>
		<VOCAL_MORPHER_PHONEMEA_COARSE_TUNING final="1" public="1" get="inline" set="null" expr="0x0002" line="137" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</VOCAL_MORPHER_PHONEMEA_COARSE_TUNING>
		<VOCAL_MORPHER_PHONEMEB final="1" public="1" get="inline" set="null" expr="0x0003" line="138" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</VOCAL_MORPHER_PHONEMEB>
		<VOCAL_MORPHER_PHONEMEB_COARSE_TUNING final="1" public="1" get="inline" set="null" expr="0x0004" line="139" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</VOCAL_MORPHER_PHONEMEB_COARSE_TUNING>
		<VOCAL_MORPHER_WAVEFORM final="1" public="1" get="inline" set="null" expr="0x0005" line="140" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</VOCAL_MORPHER_WAVEFORM>
		<VOCAL_MORPHER_RATE final="1" public="1" get="inline" set="null" expr="0x0006" line="141" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</VOCAL_MORPHER_RATE>
		<VOCAL_MORPHER_PHONEME_A final="1" public="1" get="inline" set="null" expr="0" line="144" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</VOCAL_MORPHER_PHONEME_A>
		<VOCAL_MORPHER_PHONEME_E final="1" public="1" get="inline" set="null" expr="1" line="145" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</VOCAL_MORPHER_PHONEME_E>
		<VOCAL_MORPHER_PHONEME_I final="1" public="1" get="inline" set="null" expr="2" line="146" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</VOCAL_MORPHER_PHONEME_I>
		<VOCAL_MORPHER_PHONEME_O final="1" public="1" get="inline" set="null" expr="3" line="147" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</VOCAL_MORPHER_PHONEME_O>
		<VOCAL_MORPHER_PHONEME_U final="1" public="1" get="inline" set="null" expr="4" line="148" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</VOCAL_MORPHER_PHONEME_U>
		<VOCAL_MORPHER_PHONEME_AA final="1" public="1" get="inline" set="null" expr="5" line="149" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</VOCAL_MORPHER_PHONEME_AA>
		<VOCAL_MORPHER_PHONEME_AE final="1" public="1" get="inline" set="null" expr="6" line="150" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</VOCAL_MORPHER_PHONEME_AE>
		<VOCAL_MORPHER_PHONEME_AH final="1" public="1" get="inline" set="null" expr="7" line="151" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</VOCAL_MORPHER_PHONEME_AH>
		<VOCAL_MORPHER_PHONEME_AO final="1" public="1" get="inline" set="null" expr="8" line="152" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</VOCAL_MORPHER_PHONEME_AO>
		<VOCAL_MORPHER_PHONEME_EH final="1" public="1" get="inline" set="null" expr="9" line="153" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</VOCAL_MORPHER_PHONEME_EH>
		<VOCAL_MORPHER_PHONEME_ER final="1" public="1" get="inline" set="null" expr="10" line="154" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</VOCAL_MORPHER_PHONEME_ER>
		<VOCAL_MORPHER_PHONEME_IH final="1" public="1" get="inline" set="null" expr="11" line="155" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</VOCAL_MORPHER_PHONEME_IH>
		<VOCAL_MORPHER_PHONEME_IY final="1" public="1" get="inline" set="null" expr="12" line="156" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</VOCAL_MORPHER_PHONEME_IY>
		<VOCAL_MORPHER_PHONEME_UH final="1" public="1" get="inline" set="null" expr="13" line="157" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>13</e></m></meta>
		</VOCAL_MORPHER_PHONEME_UH>
		<VOCAL_MORPHER_PHONEME_UW final="1" public="1" get="inline" set="null" expr="14" line="158" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>14</e></m></meta>
		</VOCAL_MORPHER_PHONEME_UW>
		<VOCAL_MORPHER_PHONEME_B final="1" public="1" get="inline" set="null" expr="15" line="159" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>15</e></m></meta>
		</VOCAL_MORPHER_PHONEME_B>
		<VOCAL_MORPHER_PHONEME_D final="1" public="1" get="inline" set="null" expr="16" line="160" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</VOCAL_MORPHER_PHONEME_D>
		<VOCAL_MORPHER_PHONEME_F final="1" public="1" get="inline" set="null" expr="17" line="161" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>17</e></m></meta>
		</VOCAL_MORPHER_PHONEME_F>
		<VOCAL_MORPHER_PHONEME_G final="1" public="1" get="inline" set="null" expr="18" line="162" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>18</e></m></meta>
		</VOCAL_MORPHER_PHONEME_G>
		<VOCAL_MORPHER_PHONEME_J final="1" public="1" get="inline" set="null" expr="19" line="163" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</VOCAL_MORPHER_PHONEME_J>
		<VOCAL_MORPHER_PHONEME_K final="1" public="1" get="inline" set="null" expr="20" line="164" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>20</e></m></meta>
		</VOCAL_MORPHER_PHONEME_K>
		<VOCAL_MORPHER_PHONEME_L final="1" public="1" get="inline" set="null" expr="21" line="165" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>21</e></m></meta>
		</VOCAL_MORPHER_PHONEME_L>
		<VOCAL_MORPHER_PHONEME_M final="1" public="1" get="inline" set="null" expr="22" line="166" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>22</e></m></meta>
		</VOCAL_MORPHER_PHONEME_M>
		<VOCAL_MORPHER_PHONEME_N final="1" public="1" get="inline" set="null" expr="23" line="167" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</VOCAL_MORPHER_PHONEME_N>
		<VOCAL_MORPHER_PHONEME_P final="1" public="1" get="inline" set="null" expr="24" line="168" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>24</e></m></meta>
		</VOCAL_MORPHER_PHONEME_P>
		<VOCAL_MORPHER_PHONEME_R final="1" public="1" get="inline" set="null" expr="25" line="169" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>25</e></m></meta>
		</VOCAL_MORPHER_PHONEME_R>
		<VOCAL_MORPHER_PHONEME_S final="1" public="1" get="inline" set="null" expr="26" line="170" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>26</e></m></meta>
		</VOCAL_MORPHER_PHONEME_S>
		<VOCAL_MORPHER_PHONEME_T final="1" public="1" get="inline" set="null" expr="27" line="171" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>27</e></m></meta>
		</VOCAL_MORPHER_PHONEME_T>
		<VOCAL_MORPHER_PHONEME_V final="1" public="1" get="inline" set="null" expr="28" line="172" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>28</e></m></meta>
		</VOCAL_MORPHER_PHONEME_V>
		<VOCAL_MORPHER_PHONEME_Z final="1" public="1" get="inline" set="null" expr="29" line="173" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>29</e></m></meta>
		</VOCAL_MORPHER_PHONEME_Z>
		<VOCAL_MORPHER_WAVEFORM_SINUSOID final="1" public="1" get="inline" set="null" expr="0" line="175" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</VOCAL_MORPHER_WAVEFORM_SINUSOID>
		<VOCAL_MORPHER_WAVEFORM_TRIANGLE final="1" public="1" get="inline" set="null" expr="1" line="176" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</VOCAL_MORPHER_WAVEFORM_TRIANGLE>
		<VOCAL_MORPHER_WAVEFORM_SAWTOOTH final="1" public="1" get="inline" set="null" expr="2" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</VOCAL_MORPHER_WAVEFORM_SAWTOOTH>
		<EFFECT_PITCH_SHIFTER final="1" public="1" get="inline" set="null" expr="0x0008" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EFFECT_PITCH_SHIFTER>
		<PITCH_SHIFTER_COARSE_TUNE final="1" public="1" get="inline" set="null" expr="0x0001" line="182" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</PITCH_SHIFTER_COARSE_TUNE>
		<PITCH_SHIFTER_FINE_TUNE final="1" public="1" get="inline" set="null" expr="0x0002" line="183" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</PITCH_SHIFTER_FINE_TUNE>
		<EFFECT_RING_MODULATOR final="1" public="1" get="inline" set="null" expr="0x0009" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EFFECT_RING_MODULATOR>
		<RING_MODULATOR_FREQUENCY final="1" public="1" get="inline" set="null" expr="0x0001" line="188" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</RING_MODULATOR_FREQUENCY>
		<RING_MODULATOR_HIGHPASS_CUTOFF final="1" public="1" get="inline" set="null" expr="0x0002" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</RING_MODULATOR_HIGHPASS_CUTOFF>
		<RING_MODULATOR_WAVEFORM final="1" public="1" get="inline" set="null" expr="0x0003" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</RING_MODULATOR_WAVEFORM>
		<EFFECT_AUTOWAH final="1" public="1" get="inline" set="null" expr="0x000A" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</EFFECT_AUTOWAH>
		<AUTOWAH_ATTACK_TIME final="1" public="1" get="inline" set="null" expr="0x0001" line="195" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</AUTOWAH_ATTACK_TIME>
		<AUTOWAH_RELEASE_TIME final="1" public="1" get="inline" set="null" expr="0x0002" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</AUTOWAH_RELEASE_TIME>
		<AUTOWAH_RESONANCE final="1" public="1" get="inline" set="null" expr="0x0003" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</AUTOWAH_RESONANCE>
		<AUTOWAH_PEAK_GAIN final="1" public="1" get="inline" set="null" expr="0x0004" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</AUTOWAH_PEAK_GAIN>
		<EFFECT_COMPRESSOR final="1" public="1" get="inline" set="null" expr="0x000B" line="201" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000B</e></m></meta>
		</EFFECT_COMPRESSOR>
		<COMPRESSOR_ONOFF final="1" public="1" get="inline" set="null" expr="0x0001" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</COMPRESSOR_ONOFF>
		<EFFECT_EQUALIZER final="1" public="1" get="inline" set="null" expr="0x000C" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000C</e></m></meta>
		</EFFECT_EQUALIZER>
		<EQUALIZER_LOW_GAIN final="1" public="1" get="inline" set="null" expr="0x0001" line="207" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EQUALIZER_LOW_GAIN>
		<EQUALIZER_LOW_CUTOFF final="1" public="1" get="inline" set="null" expr="0x0002" line="208" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EQUALIZER_LOW_CUTOFF>
		<EQUALIZER_MID1_GAIN final="1" public="1" get="inline" set="null" expr="0x0003" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EQUALIZER_MID1_GAIN>
		<EQUALIZER_MID1_CENTER final="1" public="1" get="inline" set="null" expr="0x0004" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0004</e></m></meta>
		</EQUALIZER_MID1_CENTER>
		<EQUALIZER_MID1_WIDTH final="1" public="1" get="inline" set="null" expr="0x0005" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0005</e></m></meta>
		</EQUALIZER_MID1_WIDTH>
		<EQUALIZER_MID2_GAIN final="1" public="1" get="inline" set="null" expr="0x0006" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0006</e></m></meta>
		</EQUALIZER_MID2_GAIN>
		<EQUALIZER_MID2_CENTER final="1" public="1" get="inline" set="null" expr="0x0007" line="213" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0007</e></m></meta>
		</EQUALIZER_MID2_CENTER>
		<EQUALIZER_MID2_WIDTH final="1" public="1" get="inline" set="null" expr="0x0008" line="214" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0008</e></m></meta>
		</EQUALIZER_MID2_WIDTH>
		<EQUALIZER_HIGH_GAIN final="1" public="1" get="inline" set="null" expr="0x0009" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0009</e></m></meta>
		</EQUALIZER_HIGH_GAIN>
		<EQUALIZER_HIGH_CUTOFF final="1" public="1" get="inline" set="null" expr="0x000A" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x000A</e></m></meta>
		</EQUALIZER_HIGH_CUTOFF>
		<FILTER_FIRST_PARAMETER final="1" public="1" get="inline" set="null" expr="0x0000" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</FILTER_FIRST_PARAMETER>
		<FILTER_LAST_PARAMETER final="1" public="1" get="inline" set="null" expr="0x8000" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8000</e></m></meta>
		</FILTER_LAST_PARAMETER>
		<FILTER_TYPE final="1" public="1" get="inline" set="null" expr="0x8001" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x8001</e></m></meta>
		</FILTER_TYPE>
		<FILTER_NULL final="1" public="1" get="inline" set="null" expr="0x0000" line="225" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</FILTER_NULL>
		<FILTER_LOWPASS final="1" public="1" get="inline" set="null" expr="0x0001" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</FILTER_LOWPASS>
		<LOWPASS_GAIN final="1" public="1" get="inline" set="null" expr="0x0001" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</LOWPASS_GAIN>
		<LOWPASS_GAINHF final="1" public="1" get="inline" set="null" expr="0x0002" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</LOWPASS_GAINHF>
		<FILTER_HIGHPASS final="1" public="1" get="inline" set="null" expr="0x0002" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</FILTER_HIGHPASS>
		<HIGHPASS_GAIN final="1" public="1" get="inline" set="null" expr="0x0001" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</HIGHPASS_GAIN>
		<HIGHPASS_GAINLF final="1" public="1" get="inline" set="null" expr="0x0002" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</HIGHPASS_GAINLF>
		<FILTER_BANDPASS final="1" public="1" get="inline" set="null" expr="0x0003" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</FILTER_BANDPASS>
		<BANDPASS_GAIN final="1" public="1" get="inline" set="null" expr="0x0001" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</BANDPASS_GAIN>
		<BANDPASS_GAINLF final="1" public="1" get="inline" set="null" expr="0x0002" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</BANDPASS_GAINLF>
		<BANDPASS_GAINHF final="1" public="1" get="inline" set="null" expr="0x0003" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</BANDPASS_GAINHF>
		<EFFECTSLOT_EFFECT final="1" public="1" get="inline" set="null" expr="0x0001" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0001</e></m></meta>
		</EFFECTSLOT_EFFECT>
		<EFFECTSLOT_GAIN final="1" public="1" get="inline" set="null" expr="0x0002" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0002</e></m></meta>
		</EFFECTSLOT_GAIN>
		<EFFECTSLOT_AUXILIARY_SEND_AUTO final="1" public="1" get="inline" set="null" expr="0x0003" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0003</e></m></meta>
		</EFFECTSLOT_AUXILIARY_SEND_AUTO>
		<EFFECTSLOT_NULL final="1" public="1" get="inline" set="null" expr="0x0000" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0000</e></m></meta>
		</EFFECTSLOT_NULL>
		<fxMap final="1" set="null" expr="[EFFECT_EAXREVERB =&gt; [EAXREVERB_REFLECTIONS_PAN =&gt; 3, EAXREVERB_LATE_REVERB_PAN =&gt; 3]]" line="253" static="1">
			<t path="Map">
				<x path="Int"/>
				<t path="Map">
					<x path="Int"/>
					<x path="Int"/>
				</t>
			</t>
			<meta><m n=":value"><e><![CDATA[[EFFECT_EAXREVERB => [EAXREVERB_REFLECTIONS_PAN => 3, EAXREVERB_LATE_REVERB_PAN => 3]]]]></e></m></meta>
		</fxMap>
		<getFXParamMapping get="inline" set="null" line="259" static="1"><f a="type:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getFXParamMapping>
		<initEFX public="1" get="inline" set="null" line="266" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Initializes the EFX extension.
     * 
     * The EFX extension will not work before this function is called once.</haxe_doc>
		</initEFX>
		<createEffects public="1" set="method" line="273" static="1">
			<f a="num">
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALEffect"/></c>
			</f>
			<haxe_doc>* Returns an array of ALEffects.
     * @param num Amount of effects to return.</haxe_doc>
		</createEffects>
		<createEffect public="1" set="method" line="289" static="1">
			<f a=""><t path="haxeal.ALEffect"/></f>
			<haxe_doc>* Creates an effect and returns it.</haxe_doc>
		</createEffect>
		<deleteEffects public="1" set="method" line="295" static="1">
			<f a="effects">
				<c path="Array"><t path="haxeal.ALEffect"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes an array of ALEffects.
     * @param effects Effects to delete.</haxe_doc>
		</deleteEffects>
		<deleteEffect public="1" set="method" line="304" static="1">
			<f a="effect">
				<t path="haxeal.ALEffect"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes a singular ALEffect
     * @param effect Effect to delete.</haxe_doc>
		</deleteEffect>
		<isEffect public="1" set="method" line="310" static="1">
			<f a="effect">
				<t path="haxeal.ALEffect"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given effect is a valid ALEffect object.
     * @param effect Effect to check validity of.</haxe_doc>
		</isEffect>
		<effecti public="1" set="method" line="318" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the integer value for the target parameter of the given effect.
     * @param effect Effect to change parameter of.
     * @param param Param to set value of.
     * @param value New integer value of the param.</haxe_doc>
		</effecti>
		<effectiv public="1" set="method" line="326" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the target parameter of the given effect.
     * @param effect Effect to change parameter of.
     * @param param Param to set values of.
     * @param value New integer values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</effectiv>
		<effectf public="1" set="method" line="334" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the float value for the target parameter of the given effect.
     * @param effect Effect to change parameter of.
     * @param param Param to set value of.
     * @param value New float value of the param.</haxe_doc>
		</effectf>
		<effectfv public="1" set="method" line="342" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the target parameter of the given effect.
     * @param effect Effect to change parameter of.
     * @param param Param to set values of.
     * @param value New float values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</effectfv>
		<getEffecti public="1" set="method" line="349" static="1">
			<f a="effect:param">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the integer value for the target parameter of the given effect.
     * @param effect Effect to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getEffecti>
		<getEffectiv public="1" set="method" line="362" static="1">
			<f a="effect:param">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values for the target parameter of the given effect.
     * 
     * The array size depends on the given param.
     * @param effect Effect to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getEffectiv>
		<getEffectf public="1" set="method" line="376" static="1">
			<f a="effect:param">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Gets the float value for the target parameter of the given effect.
     * @param effect Effect to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getEffectf>
		<getEffectfv public="1" set="method" line="389" static="1">
			<f a="effect:param">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values for the target parameter of the given effect.
     * 
     * The array size depends on the given param.
     * @param effect Effect to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getEffectfv>
		<createFilters public="1" set="method" line="403" static="1">
			<f a="num">
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALFilter"/></c>
			</f>
			<haxe_doc>* Returns an array of ALFilters.
     * @param num Amount of filters to return.</haxe_doc>
		</createFilters>
		<createFilter public="1" set="method" line="419" static="1">
			<f a=""><t path="haxeal.ALFilter"/></f>
			<haxe_doc>* Creates a filter and returns it.</haxe_doc>
		</createFilter>
		<deleteFilters public="1" set="method" line="425" static="1">
			<f a="filters">
				<c path="Array"><t path="haxeal.ALFilter"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes an array of ALFilters.
     * @param filters Filters to delete.</haxe_doc>
		</deleteFilters>
		<deleteFilter public="1" set="method" line="434" static="1">
			<f a="filter">
				<t path="haxeal.ALFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes a singular ALFilter
     * @param filter Filter to delete.</haxe_doc>
		</deleteFilter>
		<isFilter public="1" set="method" line="440" static="1">
			<f a="filter">
				<t path="haxeal.ALFilter"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given filter is a valid ALFilter object.
     * @param filter Filter to check validity of.</haxe_doc>
		</isFilter>
		<filteri public="1" set="method" line="448" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the integer value for the target parameter of the given filter.
     * @param filter Filter to change parameter of.
     * @param param Param to set value of.
     * @param value New integer value of the param.</haxe_doc>
		</filteri>
		<filteriv public="1" set="method" line="456" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the target parameter of the given filter.
     * @param filter Filter to change parameter of.
     * @param param Param to set values of.
     * @param value New integer values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</filteriv>
		<filterf public="1" set="method" line="464" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the float value for the target parameter of the given filter.
     * @param filter Filter to change parameter of.
     * @param param Param to set value of.
     * @param value New float value of the param.</haxe_doc>
		</filterf>
		<filterfv public="1" set="method" line="472" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the target parameter of the given filter.
     * @param filter Filter to change parameter of.
     * @param param Param to set values of.
     * @param value New float values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</filterfv>
		<getFilteri public="1" set="method" line="479" static="1">
			<f a="filter:param">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the integer value for the target parameter of the given filter.
     * @param filter Filter to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getFilteri>
		<getFilteriv public="1" set="method" line="493" static="1">
			<f a="filter:param">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values for the target parameter of the given filter.
     * 
     * The array size is always 1, as there are no parameters that return an array for this object.
     * @param filter Filter to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getFilteriv>
		<getFilterf public="1" set="method" line="505" static="1">
			<f a="filter:param">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Gets the float value for the target parameter of the given filter.
     * @param filter Filter to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getFilterf>
		<getFilterfv public="1" set="method" line="518" static="1">
			<f a="filter:param">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values for the target parameter of the given filter.
     * 
     * The array size is always 1, as there are no parameters that return an array for this object.
     * @param filter Filter to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getFilterfv>
		<createAuxiliaryEffectSlots public="1" set="method" line="530" static="1">
			<f a="num">
				<x path="Int"/>
				<c path="Array"><t path="haxeal.ALAuxSlot"/></c>
			</f>
			<haxe_doc>* Returns an array of Auxiliary Effect Slots.
     * @param num Amount of slots to return.</haxe_doc>
		</createAuxiliaryEffectSlots>
		<createAuxiliaryEffectSlot public="1" set="method" line="546" static="1">
			<f a=""><t path="haxeal.ALAuxSlot"/></f>
			<haxe_doc>* Creates an auxslot and returns it.</haxe_doc>
		</createAuxiliaryEffectSlot>
		<deleteAuxiliaryEffectSlots public="1" set="method" line="552" static="1">
			<f a="auxslots">
				<c path="Array"><t path="haxeal.ALAuxSlot"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes an array of Auxiliary Effect Slots.
     * @param auxslots Auxiliary Effect Slots to delete.</haxe_doc>
		</deleteAuxiliaryEffectSlots>
		<deleteAuxiliaryEffectSlot public="1" set="method" line="561" static="1">
			<f a="auxslot">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Deletes a singular ALAuxSlot
     * @param auxslot Auxiliary Effect Slot to delete.</haxe_doc>
		</deleteAuxiliaryEffectSlot>
		<isAuxiliaryEffectSlot public="1" set="method" line="567" static="1">
			<f a="auxslot">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if the given slot is a valid ALAuxSlot object.
     * @param auxslot Auxiliary Effect Slot to check validity of.</haxe_doc>
		</isAuxiliaryEffectSlot>
		<auxiliaryEffectSloti public="1" set="method" line="575" static="1">
			<f a="auxslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the integer value for the target parameter of the given auxslot.
     * @param auxslot Auxiliary Effect Slot to change parameter of.
     * @param param Param to set value of.
     * @param value New integer value of the param.</haxe_doc>
		</auxiliaryEffectSloti>
		<auxiliaryEffectSlotiv public="1" set="method" line="583" static="1">
			<f a="auxslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of integer values for the target parameter of the given Auxiliary Effect Slot.
     * @param auxslot Auxiliary Effect Slot to change parameter of.
     * @param param Param to set values of.
     * @param value New integer values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</auxiliaryEffectSlotiv>
		<auxiliaryEffectSlotf public="1" set="method" line="591" static="1">
			<f a="auxslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets the float value for the target parameter of the given Auxiliary Effect Slot.
     * @param auxslot Auxiliary Effect Slot to change parameter of.
     * @param param Param to set value of.
     * @param value New float value of the param.</haxe_doc>
		</auxiliaryEffectSlotf>
		<auxiliaryEffectSlotfv public="1" set="method" line="599" static="1">
			<f a="auxslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets an array of float values for the target parameter of the given Auxiliary Effect Slot.
     * @param auxslot Auxiliary Effect Slot to change parameter of.
     * @param param Param to set values of.
     * @param value New float values of the param as an array (array length should be the same as amount of values the parameter takes).</haxe_doc>
		</auxiliaryEffectSlotfv>
		<getAuxiliaryEffectSloti public="1" set="method" line="606" static="1">
			<f a="auxslot:param">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the integer value for the target parameter of the given Auxiliary Effect Slot.
     * @param auxslot Auxiliary Effect Slot to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getAuxiliaryEffectSloti>
		<getAuxiliaryEffectSlotiv public="1" set="method" line="619" static="1">
			<f a="auxslot:param">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple integer values for the target parameter of the given Auxiliary Effect Slot.
     * 
     * The array size is always 1, as there are no parameters that return an array for this object.
     * @param auxslot Auxiliary Effect Slot to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getAuxiliaryEffectSlotiv>
		<getAuxiliaryEffectSlotf public="1" set="method" line="631" static="1">
			<f a="auxslot:param">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Gets the float value for the target parameter of the given Auxiliary Effect Slot.
     * @param auxslot Auxiliary Effect Slot to get parameter of.
     * @param param Param to get value of.</haxe_doc>
		</getAuxiliaryEffectSlotf>
		<getAuxiliaryEffectSlotfv public="1" set="method" line="644" static="1">
			<f a="auxslot:param">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>* Returns an array of multiple float values for the target parameter of the given Auxiliary Effect Slot.
     * 
     * The array size is always 1, as there are no parameters that return an array for this object.
     * @param auxslot Auxiliary Effect Slot to get parameter of.
     * @param param Param to get values of.</haxe_doc>
		</getAuxiliaryEffectSlotfv>
		<haxe_doc>* Class for handling the HaxeAL EFX extension.</haxe_doc>
	</class>
	<class path="haxeal.bindings.AL" params="" file="source/haxeal/bindings/AL.hx" extern="1">
		<enable public="1" set="method" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alEnable"</e></m></meta>
		</enable>
		<disable public="1" set="method" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDisable"</e></m></meta>
		</disable>
		<isEnabled public="1" set="method" static="1">
			<f a="capability">
				<x path="Int"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alIsEnabled"</e></m></meta>
		</isEnabled>
		<dopplerFactor public="1" set="method" static="1">
			<f a="value">
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDopplerFactor"</e></m></meta>
		</dopplerFactor>
		<dopplerVelocity public="1" set="method" static="1">
			<f a="value">
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDopplerVelocity"</e></m></meta>
		</dopplerVelocity>
		<speedOfSound public="1" set="method" static="1">
			<f a="value">
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSpeedOfSound"</e></m></meta>
		</speedOfSound>
		<distanceModel public="1" set="method" static="1">
			<f a="distanceModel">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDistanceModel"</e></m></meta>
		</distanceModel>
		<getString public="1" set="method" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta><m n=":native"><e>"alGetString"</e></m></meta>
		</getString>
		<getBoolean public="1" set="method" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alGetBoolean"</e></m></meta>
		</getBoolean>
		<getInteger public="1" set="method" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"alGetInteger"</e></m></meta>
		</getInteger>
		<getFloat public="1" set="method" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="cpp.Float32"/>
			</f>
			<meta><m n=":native"><e>"alGetFloat"</e></m></meta>
		</getFloat>
		<getDouble public="1" set="method" static="1">
			<f a="param">
				<x path="Int"/>
				<x path="cpp.Float64"/>
			</f>
			<meta><m n=":native"><e>"alGetDouble"</e></m></meta>
		</getDouble>
		<getBooleanv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Char"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBooleanv"</e></m></meta>
		</getBooleanv>
		<getIntegerv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetIntegerv"</e></m></meta>
		</getIntegerv>
		<getFloatv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetFloatv"</e></m></meta>
		</getFloatv>
		<getDoublev public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float64"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetDoublev"</e></m></meta>
		</getDoublev>
		<isExtensionPresent public="1" set="method" static="1">
			<f a="extName">
				<x path="cpp.ConstCharStar"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"alIsExtensionPresent"</e></m></meta>
		</isExtensionPresent>
		<getProcAddress public="1" set="method" static="1">
			<f a="funcName">
				<x path="cpp.ConstCharStar"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
			</f>
			<meta><m n=":native"><e>"alGetProcAddress"</e></m></meta>
		</getProcAddress>
		<getEnumValue public="1" set="method" static="1">
			<f a="enumName">
				<x path="cpp.ConstCharStar"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"alGetEnumValue"</e></m></meta>
		</getEnumValue>
		<listenerf public="1" set="method" static="1">
			<f a="param:value">
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListenerf"</e></m></meta>
		</listenerf>
		<listener3f public="1" set="method" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListener3f"</e></m></meta>
		</listener3f>
		<listenerfv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListenerfv"</e></m></meta>
		</listenerfv>
		<listeneri public="1" set="method" static="1">
			<f a="param:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListeneri"</e></m></meta>
		</listeneri>
		<listener3i public="1" set="method" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListener3i"</e></m></meta>
		</listener3i>
		<listeneriv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alListeneriv"</e></m></meta>
		</listeneriv>
		<getListenerf public="1" set="method" static="1">
			<f a="param:value">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListenerf"</e></m></meta>
		</getListenerf>
		<getListener3f public="1" set="method" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListener3f"</e></m></meta>
		</getListener3f>
		<getListenerfv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListenerfv"</e></m></meta>
		</getListenerfv>
		<getListeneri public="1" set="method" static="1">
			<f a="param:value">
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListeneri"</e></m></meta>
		</getListeneri>
		<getListener3i public="1" set="method" static="1">
			<f a="param:value1:value2:value3">
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListener3i"</e></m></meta>
		</getListener3i>
		<getListeneriv public="1" set="method" static="1">
			<f a="param:values">
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetListeneriv"</e></m></meta>
		</getListeneriv>
		<createSources public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALSource"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGenSources"</e></m></meta>
		</createSources>
		<deleteSources public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDeleteSources"</e></m></meta>
		</deleteSources>
		<isSource public="1" set="method" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alIsSource"</e></m></meta>
		</isSource>
		<sourcef public="1" set="method" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcef"</e></m></meta>
		</sourcef>
		<source3f public="1" set="method" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSource3f"</e></m></meta>
		</source3f>
		<sourcefv public="1" set="method" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcefv"</e></m></meta>
		</sourcefv>
		<sourcei public="1" set="method" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcei"</e></m></meta>
		</sourcei>
		<source3i public="1" set="method" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSource3i"</e></m></meta>
		</source3i>
		<sourceiv public="1" set="method" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceiv"</e></m></meta>
		</sourceiv>
		<getSourcef public="1" set="method" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSourcef"</e></m></meta>
		</getSourcef>
		<getSource3f public="1" set="method" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSource3f"</e></m></meta>
		</getSource3f>
		<getSourcefv public="1" set="method" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSourcefv"</e></m></meta>
		</getSourcefv>
		<getSourcei public="1" set="method" static="1">
			<f a="source:param:value">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSourcei"</e></m></meta>
		</getSourcei>
		<getSource3i public="1" set="method" static="1">
			<f a="source:param:value1:value2:value3">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSource3i"</e></m></meta>
		</getSource3i>
		<getSourceiv public="1" set="method" static="1">
			<f a="source:param:values">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetSourceiv"</e></m></meta>
		</getSourceiv>
		<sourcePlay public="1" set="method" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcePlay"</e></m></meta>
		</sourcePlay>
		<sourceStop public="1" set="method" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceStop"</e></m></meta>
		</sourceStop>
		<sourceRewind public="1" set="method" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceRewind"</e></m></meta>
		</sourceRewind>
		<sourcePause public="1" set="method" static="1">
			<f a="source">
				<t path="haxeal.ALSource"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcePause"</e></m></meta>
		</sourcePause>
		<sourcePlayv public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcePlayv"</e></m></meta>
		</sourcePlayv>
		<sourceStopv public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceStopv"</e></m></meta>
		</sourceStopv>
		<sourceRewindv public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceRewindv"</e></m></meta>
		</sourceRewindv>
		<sourcePausev public="1" set="method" static="1">
			<f a="num:sources">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourcePausev"</e></m></meta>
		</sourcePausev>
		<sourceQueueBuffers public="1" set="method" static="1">
			<f a="source:numBuffers:buffers">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALBuffer"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceQueueBuffers"</e></m></meta>
		</sourceQueueBuffers>
		<sourceUnqueueBuffers public="1" set="method" static="1">
			<f a="source:numBuffers:buffers">
				<t path="haxeal.ALSource"/>
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALBuffer"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alSourceUnqueueBuffers"</e></m></meta>
		</sourceUnqueueBuffers>
		<createBuffers public="1" set="method" static="1">
			<f a="num:buffers">
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALBuffer"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGenBuffers"</e></m></meta>
		</createBuffers>
		<deleteBuffers public="1" set="method" static="1">
			<f a="num:buffers">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALBuffer"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alDeleteBuffers"</e></m></meta>
		</deleteBuffers>
		<isBuffer public="1" set="method" static="1">
			<f a="buffer">
				<t path="haxeal.ALBuffer"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alIsBuffer"</e></m></meta>
		</isBuffer>
		<bufferData public="1" set="method" static="1">
			<f a="buffer:format:data:size:sampleRate">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBufferData"</e></m></meta>
		</bufferData>
		<bufferf public="1" set="method" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBufferf"</e></m></meta>
		</bufferf>
		<buffer3f public="1" set="method" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBuffer3f"</e></m></meta>
		</buffer3f>
		<bufferfv public="1" set="method" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBufferfv"</e></m></meta>
		</bufferfv>
		<bufferi public="1" set="method" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBufferi"</e></m></meta>
		</bufferi>
		<buffer3i public="1" set="method" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBuffer3i"</e></m></meta>
		</buffer3i>
		<bufferiv public="1" set="method" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alBufferiv"</e></m></meta>
		</bufferiv>
		<getBufferf public="1" set="method" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBufferf"</e></m></meta>
		</getBufferf>
		<getBuffer3f public="1" set="method" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBuffer3f"</e></m></meta>
		</getBuffer3f>
		<getBufferfv public="1" set="method" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBufferfv"</e></m></meta>
		</getBufferfv>
		<getBufferi public="1" set="method" static="1">
			<f a="buffer:param:value">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBufferi"</e></m></meta>
		</getBufferi>
		<getBuffer3i public="1" set="method" static="1">
			<f a="buffer:param:value1:value2:value3">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBuffer3i"</e></m></meta>
		</getBuffer3i>
		<getBufferiv public="1" set="method" static="1">
			<f a="buffer:param:values">
				<t path="haxeal.ALBuffer"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alGetBufferiv"</e></m></meta>
		</getBufferiv>
		<getError public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"alGetError"</e></m></meta>
		</getError>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${haxelib:HaxeAL-Soft}/builder.xml\" />"]]></e></m>
			<m n=":unreflective"/>
			<m n=":keep"/>
			<m n=":include"><e>"al.h"</e></m>
		</meta>
	</class>
	<class path="haxeal.bindings.ALC" params="" file="source/haxeal/bindings/ALC.hx" extern="1">
		<createContext public="1" set="method" static="1">
			<f a="device:attributes">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
			</f>
			<meta><m n=":native"><e>"alcCreateContext"</e></m></meta>
		</createContext>
		<makeContextCurrent public="1" set="method" static="1">
			<f a="context">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alcMakeContextCurrent"</e></m></meta>
		</makeContextCurrent>
		<destroyContext public="1" set="method" static="1">
			<f a="context">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcDestroyContext"</e></m></meta>
		</destroyContext>
		<processContext public="1" set="method" static="1">
			<f a="context">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcProcessContext"</e></m></meta>
		</processContext>
		<suspendContext public="1" set="method" static="1">
			<f a="context">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcSuspendContext"</e></m></meta>
		</suspendContext>
		<getCurrentContext public="1" set="method" static="1">
			<f a=""><t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t></f>
			<meta><m n=":native"><e>"alcGetCurrentContext"</e></m></meta>
		</getCurrentContext>
		<getDeviceFromContext public="1" set="method" static="1">
			<f a="context">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCcontext"/></t>
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
			</f>
			<meta><m n=":native"><e>"alcGetContextsDevice"</e></m></meta>
		</getDeviceFromContext>
		<getError public="1" set="method" static="1">
			<f a="device">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"alcGetError"</e></m></meta>
		</getError>
		<openDevice public="1" set="method" static="1">
			<f a="deviceName">
				<x path="cpp.ConstCharStar"/>
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
			</f>
			<meta><m n=":native"><e>"alcOpenDevice"</e></m></meta>
		</openDevice>
		<closeDevice public="1" set="method" static="1">
			<f a="device">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alcCloseDevice"</e></m></meta>
		</closeDevice>
		<openCaptureDevice public="1" set="method" static="1">
			<f a="deviceName:captureFrequency:captureFormat:bufferSize">
				<x path="cpp.ConstCharStar"/>
				<x path="cpp.UInt32"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
			</f>
			<meta><m n=":native"><e>"alcCaptureOpenDevice"</e></m></meta>
		</openCaptureDevice>
		<closeCaptureDevice public="1" set="method" static="1">
			<f a="device">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":native"><e>"alcCaptureCloseDevice"</e></m></meta>
		</closeCaptureDevice>
		<startCapture public="1" set="method" static="1">
			<f a="device">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcCaptureStart"</e></m></meta>
		</startCapture>
		<stopCapture public="1" set="method" static="1">
			<f a="device">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcCaptureStop"</e></m></meta>
		</stopCapture>
		<captureSamples public="1" set="method" static="1">
			<f a="device:buffer:samples">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<t path="cpp.Star"><c path="cpp.Void"/></t>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcCaptureSamples"</e></m></meta>
		</captureSamples>
		<isExtensionPresent public="1" set="method" static="1">
			<f a="device:extName">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="cpp.ConstCharStar"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"alcIsExtensionPresent"</e></m></meta>
		</isExtensionPresent>
		<getProcAddress public="1" set="method" static="1">
			<f a="device:funcName">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="cpp.ConstCharStar"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"alcGetProcAddress"</e></m></meta>
		</getProcAddress>
		<getEnumValue public="1" set="method" static="1">
			<f a="device:enumName">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="cpp.ConstCharStar"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"alcGetEnumValue"</e></m></meta>
		</getEnumValue>
		<getString public="1" set="method" static="1">
			<f a="device:param">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="Int"/>
				<x path="cpp.ConstCharStar"/>
			</f>
			<meta><m n=":native"><e>"alcGetString"</e></m></meta>
		</getString>
		<getIntegers public="1" set="method" static="1">
			<f a="device:param:size:values">
				<t path="cpp.Star"><c path="haxeal.bindings.ALCdevice"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"alcGetIntegerv"</e></m></meta>
		</getIntegers>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${haxelib:HaxeAL-Soft}/builder.xml\" />"]]></e></m>
			<m n=":unreflective"/>
			<m n=":keep"/>
			<m n=":include"><e>"alc.h"</e></m>
		</meta>
	</class>
	<class path="haxeal.bindings.ALCdevice" params="" file="source/haxeal/bindings/ALC.hx" module="haxeal.bindings.ALC" extern="1"><meta>
	<m n=":unreflective"/>
	<m n=":keep"/>
	<m n=":include"><e>"alc.h"</e></m>
	<m n=":structAccess"/>
	<m n=":native"><e>"ALCdevice"</e></m>
</meta></class>
	<class path="haxeal.bindings.ALCcontext" params="" file="source/haxeal/bindings/ALC.hx" module="haxeal.bindings.ALC" extern="1"><meta>
	<m n=":unreflective"/>
	<m n=":keep"/>
	<m n=":include"><e>"alc.h"</e></m>
	<m n=":structAccess"/>
	<m n=":native"><e>"ALCcontext"</e></m>
</meta></class>
	<class path="haxeal.bindings.BinderHelper" params="" file="source/haxeal/bindings/BinderHelper.hx">
		<int_ToPtr public="1" get="inline" set="null" line="19" static="1">
			<f a="obj">
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
			</f>
			<haxe_doc><![CDATA[* Turns an integer into an integer pointer (Pointer<Int>)]]></haxe_doc>
		</int_ToPtr>
		<arrayInt_ToPtr public="1" get="inline" set="null" line="24" static="1">
			<f a="array">
				<c path="Array"><x path="Int"/></c>
				<c path="cpp.Pointer"><x path="Int"/></c>
			</f>
			<haxe_doc><![CDATA[* Turns an array of integers into an integer pointer (Pointer<Int>)]]></haxe_doc>
		</arrayInt_ToPtr>
		<arrayInt_ToStar public="1" get="inline" set="null" line="29" static="1">
			<f a="array">
				<c path="Array"><x path="Int"/></c>
				<t path="cpp.Star"><x path="Int"/></t>
			</f>
			<haxe_doc><![CDATA[* Turns an array of integers into an integer pointer (Star<Int>)]]></haxe_doc>
		</arrayInt_ToStar>
		<float_ToPtr public="1" get="inline" set="null" line="32" static="1"><f a="f">
	<x path="Float"/>
	<c path="cpp.Pointer"><x path="Float"/></c>
</f></float_ToPtr>
		<arrayFloat32_ToPtr public="1" get="inline" set="null" line="34" static="1"><f a="array">
	<c path="Array"><x path="Float"/></c>
	<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
</f></arrayFloat32_ToPtr>
		<arrayFloat64_ToPtr public="1" get="inline" set="null" line="40" static="1"><f a="array">
	<c path="Array"><x path="Float"/></c>
	<c path="cpp.Pointer"><x path="cpp.Float64"/></c>
</f></arrayFloat64_ToPtr>
		<arrayFloat_ToStar public="1" get="inline" set="null" line="47" static="1"><f a="array">
	<c path="Array"><x path="Float"/></c>
	<t path="cpp.Star"><x path="Float"/></t>
</f></arrayFloat_ToStar>
		<arraySource_ToPtr public="1" get="inline" set="null" line="52" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALSource"/></c>
	<c path="cpp.Pointer"><t path="haxeal.ALSource"/></c>
</f></arraySource_ToPtr>
		<arraySource_ToStar public="1" get="inline" set="null" line="54" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALSource"/></c>
	<t path="cpp.Star"><t path="haxeal.ALSource"/></t>
</f></arraySource_ToStar>
		<star_ToArraySource public="1" get="inline" set="null" line="56" static="1"><f a="str:len">
	<t path="cpp.Star"><t path="haxeal.ALSource"/></t>
	<x path="Int"/>
	<c path="Array"><t path="haxeal.ALSource"/></c>
</f></star_ToArraySource>
		<arrayEffect_ToPtr public="1" get="inline" set="null" line="59" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALEffect"/></c>
	<c path="cpp.Pointer"><t path="haxeal.ALEffect"/></c>
</f></arrayEffect_ToPtr>
		<arrayEffect_ToStar public="1" get="inline" set="null" line="61" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALEffect"/></c>
	<t path="cpp.Star"><t path="haxeal.ALEffect"/></t>
</f></arrayEffect_ToStar>
		<star_ToArrayEffect public="1" get="inline" set="null" line="63" static="1"><f a="str:len">
	<t path="cpp.Star"><t path="haxeal.ALEffect"/></t>
	<x path="Int"/>
	<c path="Array"><t path="haxeal.ALEffect"/></c>
</f></star_ToArrayEffect>
		<arrayFilter_ToPtr public="1" get="inline" set="null" line="66" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALFilter"/></c>
	<c path="cpp.Pointer"><t path="haxeal.ALFilter"/></c>
</f></arrayFilter_ToPtr>
		<arrayFilter_ToStar public="1" get="inline" set="null" line="68" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALFilter"/></c>
	<t path="cpp.Star"><t path="haxeal.ALFilter"/></t>
</f></arrayFilter_ToStar>
		<star_ToArrayFilter public="1" get="inline" set="null" line="70" static="1"><f a="str:len">
	<t path="cpp.Star"><t path="haxeal.ALFilter"/></t>
	<x path="Int"/>
	<c path="Array"><t path="haxeal.ALFilter"/></c>
</f></star_ToArrayFilter>
		<arrayAuxiliaryEffectSlot_ToPtr public="1" get="inline" set="null" line="73" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALAuxSlot"/></c>
	<c path="cpp.Pointer"><t path="haxeal.ALAuxSlot"/></c>
</f></arrayAuxiliaryEffectSlot_ToPtr>
		<arrayAuxiliaryEffectSlot_ToStar public="1" get="inline" set="null" line="75" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALAuxSlot"/></c>
	<t path="cpp.Star"><t path="haxeal.ALAuxSlot"/></t>
</f></arrayAuxiliaryEffectSlot_ToStar>
		<star_ToArrayAuxiliaryEffectSlot public="1" get="inline" set="null" line="77" static="1"><f a="str:len">
	<t path="cpp.Star"><t path="haxeal.ALAuxSlot"/></t>
	<x path="Int"/>
	<c path="Array"><t path="haxeal.ALAuxSlot"/></c>
</f></star_ToArrayAuxiliaryEffectSlot>
		<arrayBuffer_ToPtr public="1" get="inline" set="null" line="80" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALBuffer"/></c>
	<c path="cpp.Pointer"><t path="haxeal.ALBuffer"/></c>
</f></arrayBuffer_ToPtr>
		<arrayBuffer_ToStar public="1" get="inline" set="null" line="82" static="1"><f a="array">
	<c path="Array"><t path="haxeal.ALBuffer"/></c>
	<t path="cpp.Star"><t path="haxeal.ALBuffer"/></t>
</f></arrayBuffer_ToStar>
		<star_ToArrayBuffer public="1" get="inline" set="null" line="84" static="1"><f a="str:len">
	<t path="cpp.Star"><t path="haxeal.ALBuffer"/></t>
	<x path="Int"/>
	<c path="Array"><t path="haxeal.ALBuffer"/></c>
</f></star_ToArrayBuffer>
		<star_ToArrayFloat32 public="1" get="inline" set="null" line="87" static="1"><f a="str:len">
	<t path="cpp.Star"><x path="cpp.Float32"/></t>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></star_ToArrayFloat32>
		<star_ToArrayUInt8 public="1" get="inline" set="null" line="94" static="1"><f a="str:len">
	<t path="cpp.Star"><x path="cpp.UInt8"/></t>
	<x path="Int"/>
	<c path="Array"><x path="cpp.UInt8"/></c>
</f></star_ToArrayUInt8>
		<star_ToArrayInt public="1" get="inline" set="null" line="98" static="1"><f a="str:len">
	<t path="cpp.Star"><x path="Int"/></t>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></star_ToArrayInt>
		<al_bool public="1" get="inline" set="null" line="106" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Turns an integer into a boolean value.
     * 0 is false, 1 is true</haxe_doc>
		</al_bool>
		<toVoidPtr public="1" set="method" line="110" static="1">
			<f a="dyn">
				<d/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</toVoidPtr>
		<fromVoidPtr public="1" set="method" line="119" static="1">
			<f a="ptr">
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromVoidPtr>
	</class>
	<class path="haxeal.bindings.EFX" params="" file="source/haxeal/bindings/EFX.hx">
		<createEffects public="1" set="method" line="51" static="1">
			<f a="n:effects">
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALEffect"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGenEffects(n, effects);"</e></m></meta>
		</createEffects>
		<deleteEffects public="1" set="method" line="54" static="1">
			<f a="n:effects">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALEffect"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alDeleteEffects(n, effects);"</e></m></meta>
		</deleteEffects>
		<isEffect public="1" set="method" line="57" static="1">
			<f a="effect">
				<t path="haxeal.ALEffect"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":functionCode"><e>"return alIsEffect(effect);"</e></m></meta>
		</isEffect>
		<effecti public="1" set="method" line="60" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alEffecti(effect, param, value);"</e></m></meta>
		</effecti>
		<effectiv public="1" set="method" line="63" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alEffectiv(effect, param, values);"</e></m></meta>
		</effectiv>
		<effectf public="1" set="method" line="66" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alEffectf(effect, param, value);"</e></m></meta>
		</effectf>
		<effectfv public="1" set="method" line="69" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alEffectfv(effect, param, values);"</e></m></meta>
		</effectfv>
		<getEffecti public="1" set="method" line="72" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetEffecti(effect, param, value);"</e></m></meta>
		</getEffecti>
		<getEffectiv public="1" set="method" line="75" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetEffectiv(effect, param, values);"</e></m></meta>
		</getEffectiv>
		<getEffectf public="1" set="method" line="78" static="1">
			<f a="effect:param:value">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetEffectf(effect, param, value);"</e></m></meta>
		</getEffectf>
		<getEffectfv public="1" set="method" line="81" static="1">
			<f a="effect:param:values">
				<t path="haxeal.ALEffect"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetEffectfv(effect, param, values);"</e></m></meta>
		</getEffectfv>
		<createFilters public="1" set="method" line="85" static="1">
			<f a="n:filters">
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALFilter"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGenFilters(n, filters);"</e></m></meta>
		</createFilters>
		<deleteFilters public="1" set="method" line="88" static="1">
			<f a="n:filters">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALFilter"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alDeleteFilters(n, filters);"</e></m></meta>
		</deleteFilters>
		<isFilter public="1" set="method" line="91" static="1">
			<f a="filter">
				<t path="haxeal.ALFilter"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":functionCode"><e>"return alIsFilter(filter);"</e></m></meta>
		</isFilter>
		<filteri public="1" set="method" line="94" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alFilteri(filter, param, value);"</e></m></meta>
		</filteri>
		<filteriv public="1" set="method" line="97" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alFilteriv(filter, param, values);"</e></m></meta>
		</filteriv>
		<filterf public="1" set="method" line="100" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alFilterf(filter, param, value);"</e></m></meta>
		</filterf>
		<filterfv public="1" set="method" line="103" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alFilterfv(filter, param, values);"</e></m></meta>
		</filterfv>
		<getFilteri public="1" set="method" line="106" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetFilteri(filter, param, value);"</e></m></meta>
		</getFilteri>
		<getFilteriv public="1" set="method" line="109" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetFilteriv(filter, param, values);"</e></m></meta>
		</getFilteriv>
		<getFilterf public="1" set="method" line="112" static="1">
			<f a="filter:param:value">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetFilterf(filter, param, value);"</e></m></meta>
		</getFilterf>
		<getFilterfv public="1" set="method" line="115" static="1">
			<f a="filter:param:values">
				<t path="haxeal.ALFilter"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetFilterfv(filter, param, values);"</e></m></meta>
		</getFilterfv>
		<createAuxiliaryEffectSlots public="1" set="method" line="119" static="1">
			<f a="n:effectslots">
				<x path="Int"/>
				<t path="cpp.Star"><t path="haxeal.ALAuxSlot"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGenAuxiliaryEffectSlots(n, effectslots);"</e></m></meta>
		</createAuxiliaryEffectSlots>
		<deleteAuxiliaryEffectSlots public="1" set="method" line="122" static="1">
			<f a="n:effectslots">
				<x path="Int"/>
				<c path="cpp.Pointer"><t path="haxeal.ALAuxSlot"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alDeleteAuxiliaryEffectSlots(n, effectslots);"</e></m></meta>
		</deleteAuxiliaryEffectSlots>
		<isAuxiliaryEffectSlot public="1" set="method" line="125" static="1">
			<f a="effectslot">
				<t path="haxeal.ALAuxSlot"/>
				<x path="cpp.Char"/>
			</f>
			<meta><m n=":functionCode"><e>"return alIsAuxiliaryEffectSlot(effectslot);"</e></m></meta>
		</isAuxiliaryEffectSlot>
		<auxiliaryEffectSloti public="1" set="method" line="128" static="1">
			<f a="effectslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alAuxiliaryEffectSloti(effectslot, param, value);"</e></m></meta>
		</auxiliaryEffectSloti>
		<auxiliaryEffectSlotiv public="1" set="method" line="131" static="1">
			<f a="effectslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="Int"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alAuxiliaryEffectSlotiv(effectslot, param, values);"</e></m></meta>
		</auxiliaryEffectSlotiv>
		<auxiliaryEffectSlotf public="1" set="method" line="134" static="1">
			<f a="effectslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<x path="cpp.Float32"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alAuxiliaryEffectSlotf(effectslot, param, value);"</e></m></meta>
		</auxiliaryEffectSlotf>
		<auxiliaryEffectSlotfv public="1" set="method" line="137" static="1">
			<f a="effectslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<c path="cpp.Pointer"><x path="cpp.Float32"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alAuxiliaryEffectSlotfv(effectslot, param, values);"</e></m></meta>
		</auxiliaryEffectSlotfv>
		<getAuxiliaryEffectSloti public="1" set="method" line="140" static="1">
			<f a="effectslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetAuxiliaryEffectSloti(effectslot, param, value);"</e></m></meta>
		</getAuxiliaryEffectSloti>
		<getAuxiliaryEffectSlotiv public="1" set="method" line="143" static="1">
			<f a="effectslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="Int"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetAuxiliaryEffectSlotiv(effectslot, param, values);"</e></m></meta>
		</getAuxiliaryEffectSlotiv>
		<getAuxiliaryEffectSlotf public="1" set="method" line="146" static="1">
			<f a="effectslot:param:value">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetAuxiliaryEffectSlotf(effectslot, param, value);"</e></m></meta>
		</getAuxiliaryEffectSlotf>
		<getAuxiliaryEffectSlotfv public="1" set="method" line="149" static="1">
			<f a="effectslot:param:values">
				<t path="haxeal.ALAuxSlot"/>
				<x path="Int"/>
				<t path="cpp.Star"><x path="cpp.Float32"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"alGetAuxiliaryEffectSlotfv(effectslot, param, values);"</e></m></meta>
		</getAuxiliaryEffectSlotfv>
		<initEFX public="1" set="method" line="94" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>" \talGenEffects = (LPALGENEFFECTS) alGetProcAddress(\"alGenEffects\");\n \talDeleteEffects = (LPALDELETEEFFECTS) alGetProcAddress(\"alDeleteEffects\");\n \talIsEffect = (LPALISEFFECT) alGetProcAddress(\"alIsEffect\");\n \talEffecti = (LPALEFFECTI) alGetProcAddress(\"alEffecti\");\n \talEffectiv = (LPALEFFECTIV) alGetProcAddress(\"alEffectiv\");\n \talEffectf = (LPALEFFECTF) alGetProcAddress(\"alEffectf\");\n \talEffectfv = (LPALEFFECTFV) alGetProcAddress(\"alEffectfv\");\n \talGetEffecti = (LPALGETEFFECTI) alGetProcAddress(\"alGetEffecti\");\n \talGetEffectiv = (LPALGETEFFECTIV) alGetProcAddress(\"alGetEffectiv\");\n \talGetEffectf = (LPALGETEFFECTF) alGetProcAddress(\"alGetEffectf\");\n \talGetEffectfv = (LPALGETEFFECTFV) alGetProcAddress(\"alGetEffectfv\");\n \talGenFilters = (LPALGENFILTERS) alGetProcAddress(\"alGenFilters\");\n \talDeleteFilters = (LPALDELETEFILTERS) alGetProcAddress(\"alDeleteFilters\");\n \talIsFilter = (LPALISFILTER) alGetProcAddress(\"alIsFilter\");\n \talFilteri = (LPALFILTERI) alGetProcAddress(\"alFilteri\");\n \talFilteriv = (LPALFILTERIV) alGetProcAddress(\"alFilteriv\");\n \talFilterf = (LPALFILTERF) alGetProcAddress(\"alFilterf\");\n \talFilterfv = (LPALFILTERFV) alGetProcAddress(\"alFilterfv\");\n \talGetFilteri = (LPALGETFILTERI) alGetProcAddress(\"alGetFilteri\");\n \talGetFilteriv = (LPALGETFILTERIV) alGetProcAddress(\"alGetFilteriv\");\n \talGetFilterf = (LPALGETFILTERF) alGetProcAddress(\"alGetFilterf\");\n \talGetFilterfv = (LPALGETFILTERFV) alGetProcAddress(\"alGetFilterfv\");\n \talGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS) alGetProcAddress(\"alGenAuxiliaryEffectSlots\");\n \talDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS) alGetProcAddress(\"alDeleteAuxiliaryEffectSlots\");\n \talIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT) alGetProcAddress(\"alIsAuxiliaryEffectSlot\");\n \talAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI) alGetProcAddress(\"alAuxiliaryEffectSloti\");\n \talAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV) alGetProcAddress(\"alAuxiliaryEffectSlotiv\");\n \talAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF) alGetProcAddress(\"alAuxiliaryEffectSlotf\");\n \talAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV) alGetProcAddress(\"alAuxiliaryEffectSlotfv\");\n \talGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI) alGetProcAddress(\"alGetAuxiliaryEffectSloti\");\n \talGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV) alGetProcAddress(\"alGetAuxiliaryEffectSlotiv\");\n \talGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF) alGetProcAddress(\"alGetAuxiliaryEffectSlotf\");\n \talGetAuxiliaryEffectSlotfv = (LPALGETAUXILIARYEFFECTSLOTFV) alGetProcAddress(\"alGetAuxiliaryEffectSlotfv\");\n"</e></m></meta>
		</initEFX>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${haxelib:HaxeAL-Soft}/builder.xml\" />"]]></e></m>
			<m n=":build"><e>haxeal.bindings.EFXBuilder.buildFunctions()</e></m>
			<m n=":headerCode"><e><![CDATA["\r\n    #include <efx.h>\r\n\r\n    static LPALGENEFFECTS alGenEffects;\r\n    static LPALDELETEEFFECTS alDeleteEffects;\r\n    static LPALISEFFECT alIsEffect;\r\n    static LPALEFFECTI alEffecti;\r\n    static LPALEFFECTIV alEffectiv;\r\n    static LPALEFFECTF alEffectf;\r\n    static LPALEFFECTFV alEffectfv;\r\n    static LPALGETEFFECTI alGetEffecti;\r\n    static LPALGETEFFECTIV alGetEffectiv;\r\n    static LPALGETEFFECTF alGetEffectf;\r\n    static LPALGETEFFECTFV alGetEffectfv;\r\n    static LPALGENFILTERS alGenFilters;\r\n    static LPALDELETEFILTERS alDeleteFilters;\r\n    static LPALISFILTER alIsFilter;\r\n    static LPALFILTERI alFilteri;\r\n    static LPALFILTERIV alFilteriv;\r\n    static LPALFILTERF alFilterf;\r\n    static LPALFILTERFV alFilterfv;\r\n    static LPALGETFILTERI alGetFilteri;\r\n    static LPALGETFILTERIV alGetFilteriv;\r\n    static LPALGETFILTERF alGetFilterf;\r\n    static LPALGETFILTERFV alGetFilterfv;\r\n    static LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots;\r\n    static LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots;\r\n    static LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot;\r\n    static LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti;\r\n    static LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv;\r\n    static LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf;\r\n    static LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv;\r\n    static LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti;\r\n    static LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv;\r\n    static LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf;\r\n    static LPALGETAUXILIARYEFFECTSLOTFV alGetAuxiliaryEffectSlotfv;\r\n"]]></e></m>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\HaxeToolkit\haxe\std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
</haxe>